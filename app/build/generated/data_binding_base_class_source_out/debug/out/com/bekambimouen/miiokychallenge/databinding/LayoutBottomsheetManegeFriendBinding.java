// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBottomsheetManegeFriendBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView friendsFrom;

  @NonNull
  public final TextView fullName;

  @NonNull
  public final LinearLayout linLayoutRemoveFromFriends;

  @NonNull
  public final LinearLayout linLayoutResubscribeTo;

  @NonNull
  public final LinearLayout linLayoutSeeUserFriends;

  @NonNull
  public final LinearLayout linLayoutSendAMessageTo;

  @NonNull
  public final LinearLayout linLayoutUnsubscribeFrom;

  @NonNull
  public final CircleImageView profilePhoto;

  @NonNull
  public final RelativeLayout relLayoutGoUserProfile;

  @NonNull
  public final RelativeLayout relLayoutProfile;

  @NonNull
  public final TextView removeFromFriends;

  @NonNull
  public final TextView removeHimFromYourFriends;

  @NonNull
  public final TextView resubscribeTo;

  @NonNull
  public final TextView seeUserFriends;

  @NonNull
  public final TextView sendAMessageTo;

  @NonNull
  public final TextView unsubscribeFrom;

  @NonNull
  public final TextView username;

  private LayoutBottomsheetManegeFriendBinding(@NonNull LinearLayout rootView,
      @NonNull TextView friendsFrom, @NonNull TextView fullName,
      @NonNull LinearLayout linLayoutRemoveFromFriends,
      @NonNull LinearLayout linLayoutResubscribeTo, @NonNull LinearLayout linLayoutSeeUserFriends,
      @NonNull LinearLayout linLayoutSendAMessageTo, @NonNull LinearLayout linLayoutUnsubscribeFrom,
      @NonNull CircleImageView profilePhoto, @NonNull RelativeLayout relLayoutGoUserProfile,
      @NonNull RelativeLayout relLayoutProfile, @NonNull TextView removeFromFriends,
      @NonNull TextView removeHimFromYourFriends, @NonNull TextView resubscribeTo,
      @NonNull TextView seeUserFriends, @NonNull TextView sendAMessageTo,
      @NonNull TextView unsubscribeFrom, @NonNull TextView username) {
    this.rootView = rootView;
    this.friendsFrom = friendsFrom;
    this.fullName = fullName;
    this.linLayoutRemoveFromFriends = linLayoutRemoveFromFriends;
    this.linLayoutResubscribeTo = linLayoutResubscribeTo;
    this.linLayoutSeeUserFriends = linLayoutSeeUserFriends;
    this.linLayoutSendAMessageTo = linLayoutSendAMessageTo;
    this.linLayoutUnsubscribeFrom = linLayoutUnsubscribeFrom;
    this.profilePhoto = profilePhoto;
    this.relLayoutGoUserProfile = relLayoutGoUserProfile;
    this.relLayoutProfile = relLayoutProfile;
    this.removeFromFriends = removeFromFriends;
    this.removeHimFromYourFriends = removeHimFromYourFriends;
    this.resubscribeTo = resubscribeTo;
    this.seeUserFriends = seeUserFriends;
    this.sendAMessageTo = sendAMessageTo;
    this.unsubscribeFrom = unsubscribeFrom;
    this.username = username;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBottomsheetManegeFriendBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBottomsheetManegeFriendBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_bottomsheet_manege_friend, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBottomsheetManegeFriendBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.friends_from;
      TextView friendsFrom = ViewBindings.findChildViewById(rootView, id);
      if (friendsFrom == null) {
        break missingId;
      }

      id = R.id.full_name;
      TextView fullName = ViewBindings.findChildViewById(rootView, id);
      if (fullName == null) {
        break missingId;
      }

      id = R.id.linLayout_remove_from_friends;
      LinearLayout linLayoutRemoveFromFriends = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutRemoveFromFriends == null) {
        break missingId;
      }

      id = R.id.linLayout_resubscribe_to;
      LinearLayout linLayoutResubscribeTo = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutResubscribeTo == null) {
        break missingId;
      }

      id = R.id.linLayout_see_user_friends;
      LinearLayout linLayoutSeeUserFriends = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutSeeUserFriends == null) {
        break missingId;
      }

      id = R.id.linLayout_send_a_message_to;
      LinearLayout linLayoutSendAMessageTo = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutSendAMessageTo == null) {
        break missingId;
      }

      id = R.id.linLayout_unsubscribe_from;
      LinearLayout linLayoutUnsubscribeFrom = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutUnsubscribeFrom == null) {
        break missingId;
      }

      id = R.id.profile_photo;
      CircleImageView profilePhoto = ViewBindings.findChildViewById(rootView, id);
      if (profilePhoto == null) {
        break missingId;
      }

      id = R.id.relLayout_go_user_profile;
      RelativeLayout relLayoutGoUserProfile = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutGoUserProfile == null) {
        break missingId;
      }

      id = R.id.relLayout_profile;
      RelativeLayout relLayoutProfile = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutProfile == null) {
        break missingId;
      }

      id = R.id.remove_from_friends;
      TextView removeFromFriends = ViewBindings.findChildViewById(rootView, id);
      if (removeFromFriends == null) {
        break missingId;
      }

      id = R.id.remove_him_from_your_friends;
      TextView removeHimFromYourFriends = ViewBindings.findChildViewById(rootView, id);
      if (removeHimFromYourFriends == null) {
        break missingId;
      }

      id = R.id.resubscribe_to;
      TextView resubscribeTo = ViewBindings.findChildViewById(rootView, id);
      if (resubscribeTo == null) {
        break missingId;
      }

      id = R.id.see_user_friends;
      TextView seeUserFriends = ViewBindings.findChildViewById(rootView, id);
      if (seeUserFriends == null) {
        break missingId;
      }

      id = R.id.send_a_message_to;
      TextView sendAMessageTo = ViewBindings.findChildViewById(rootView, id);
      if (sendAMessageTo == null) {
        break missingId;
      }

      id = R.id.unsubscribe_from;
      TextView unsubscribeFrom = ViewBindings.findChildViewById(rootView, id);
      if (unsubscribeFrom == null) {
        break missingId;
      }

      id = R.id.username;
      TextView username = ViewBindings.findChildViewById(rootView, id);
      if (username == null) {
        break missingId;
      }

      return new LayoutBottomsheetManegeFriendBinding((LinearLayout) rootView, friendsFrom,
          fullName, linLayoutRemoveFromFriends, linLayoutResubscribeTo, linLayoutSeeUserFriends,
          linLayoutSendAMessageTo, linLayoutUnsubscribeFrom, profilePhoto, relLayoutGoUserProfile,
          relLayoutProfile, removeFromFriends, removeHimFromYourFriends, resubscribeTo,
          seeUserFriends, sendAMessageTo, unsubscribeFrom, username);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
