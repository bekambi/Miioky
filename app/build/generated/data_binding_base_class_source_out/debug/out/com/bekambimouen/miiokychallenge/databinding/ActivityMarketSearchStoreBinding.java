// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMarketSearchStoreBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout arrowBack;

  @NonNull
  public final ImageView close;

  @NonNull
  public final AutoCompleteTextView editNeighborhood;

  @NonNull
  public final AutoCompleteTextView editPriceMax;

  @NonNull
  public final AutoCompleteTextView editPriceMin;

  @NonNull
  public final AutoCompleteTextView editSearch;

  @NonNull
  public final ImageView erase;

  @NonNull
  public final LinearLayout linLayoutFilter;

  @NonNull
  public final TextView maxPrice;

  @NonNull
  public final TextView minPrice;

  @NonNull
  public final TextView neighborhood;

  @NonNull
  public final RelativeLayout parent;

  @NonNull
  public final RelativeLayout relLayout52Max;

  @NonNull
  public final RelativeLayout relLayout52Min;

  @NonNull
  public final RelativeLayout relLayoutFilter;

  @NonNull
  public final RelativeLayout relLayoutNeighborhood;

  @NonNull
  public final RelativeLayout relLayoutPriceMax;

  @NonNull
  public final RelativeLayout relLayoutPriceMin;

  @NonNull
  public final RelativeLayout relLayoutSearch;

  @NonNull
  public final RelativeLayout relLayoutViewOverlay;

  @NonNull
  public final ImageView searchIdWhite;

  @NonNull
  public final TextView textFilter;

  @NonNull
  public final Toolbar toolBar;

  private ActivityMarketSearchStoreBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout arrowBack, @NonNull ImageView close,
      @NonNull AutoCompleteTextView editNeighborhood, @NonNull AutoCompleteTextView editPriceMax,
      @NonNull AutoCompleteTextView editPriceMin, @NonNull AutoCompleteTextView editSearch,
      @NonNull ImageView erase, @NonNull LinearLayout linLayoutFilter, @NonNull TextView maxPrice,
      @NonNull TextView minPrice, @NonNull TextView neighborhood, @NonNull RelativeLayout parent,
      @NonNull RelativeLayout relLayout52Max, @NonNull RelativeLayout relLayout52Min,
      @NonNull RelativeLayout relLayoutFilter, @NonNull RelativeLayout relLayoutNeighborhood,
      @NonNull RelativeLayout relLayoutPriceMax, @NonNull RelativeLayout relLayoutPriceMin,
      @NonNull RelativeLayout relLayoutSearch, @NonNull RelativeLayout relLayoutViewOverlay,
      @NonNull ImageView searchIdWhite, @NonNull TextView textFilter, @NonNull Toolbar toolBar) {
    this.rootView = rootView;
    this.arrowBack = arrowBack;
    this.close = close;
    this.editNeighborhood = editNeighborhood;
    this.editPriceMax = editPriceMax;
    this.editPriceMin = editPriceMin;
    this.editSearch = editSearch;
    this.erase = erase;
    this.linLayoutFilter = linLayoutFilter;
    this.maxPrice = maxPrice;
    this.minPrice = minPrice;
    this.neighborhood = neighborhood;
    this.parent = parent;
    this.relLayout52Max = relLayout52Max;
    this.relLayout52Min = relLayout52Min;
    this.relLayoutFilter = relLayoutFilter;
    this.relLayoutNeighborhood = relLayoutNeighborhood;
    this.relLayoutPriceMax = relLayoutPriceMax;
    this.relLayoutPriceMin = relLayoutPriceMin;
    this.relLayoutSearch = relLayoutSearch;
    this.relLayoutViewOverlay = relLayoutViewOverlay;
    this.searchIdWhite = searchIdWhite;
    this.textFilter = textFilter;
    this.toolBar = toolBar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMarketSearchStoreBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMarketSearchStoreBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_market_search_store, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMarketSearchStoreBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrowBack;
      RelativeLayout arrowBack = ViewBindings.findChildViewById(rootView, id);
      if (arrowBack == null) {
        break missingId;
      }

      id = R.id.close;
      ImageView close = ViewBindings.findChildViewById(rootView, id);
      if (close == null) {
        break missingId;
      }

      id = R.id.edit_neighborhood;
      AutoCompleteTextView editNeighborhood = ViewBindings.findChildViewById(rootView, id);
      if (editNeighborhood == null) {
        break missingId;
      }

      id = R.id.edit_price_max;
      AutoCompleteTextView editPriceMax = ViewBindings.findChildViewById(rootView, id);
      if (editPriceMax == null) {
        break missingId;
      }

      id = R.id.edit_price_min;
      AutoCompleteTextView editPriceMin = ViewBindings.findChildViewById(rootView, id);
      if (editPriceMin == null) {
        break missingId;
      }

      id = R.id.edit_search;
      AutoCompleteTextView editSearch = ViewBindings.findChildViewById(rootView, id);
      if (editSearch == null) {
        break missingId;
      }

      id = R.id.erase;
      ImageView erase = ViewBindings.findChildViewById(rootView, id);
      if (erase == null) {
        break missingId;
      }

      id = R.id.linLayout_filter;
      LinearLayout linLayoutFilter = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutFilter == null) {
        break missingId;
      }

      id = R.id.max_price;
      TextView maxPrice = ViewBindings.findChildViewById(rootView, id);
      if (maxPrice == null) {
        break missingId;
      }

      id = R.id.min_price;
      TextView minPrice = ViewBindings.findChildViewById(rootView, id);
      if (minPrice == null) {
        break missingId;
      }

      id = R.id.neighborhood;
      TextView neighborhood = ViewBindings.findChildViewById(rootView, id);
      if (neighborhood == null) {
        break missingId;
      }

      RelativeLayout parent = (RelativeLayout) rootView;

      id = R.id.relLayout52_max;
      RelativeLayout relLayout52Max = ViewBindings.findChildViewById(rootView, id);
      if (relLayout52Max == null) {
        break missingId;
      }

      id = R.id.relLayout52_min;
      RelativeLayout relLayout52Min = ViewBindings.findChildViewById(rootView, id);
      if (relLayout52Min == null) {
        break missingId;
      }

      id = R.id.relLayout_filter;
      RelativeLayout relLayoutFilter = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutFilter == null) {
        break missingId;
      }

      id = R.id.relLayout_neighborhood;
      RelativeLayout relLayoutNeighborhood = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutNeighborhood == null) {
        break missingId;
      }

      id = R.id.relLayout_price_max;
      RelativeLayout relLayoutPriceMax = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutPriceMax == null) {
        break missingId;
      }

      id = R.id.relLayout_price_min;
      RelativeLayout relLayoutPriceMin = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutPriceMin == null) {
        break missingId;
      }

      id = R.id.relLayout_search;
      RelativeLayout relLayoutSearch = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutSearch == null) {
        break missingId;
      }

      id = R.id.relLayout_view_overlay;
      RelativeLayout relLayoutViewOverlay = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutViewOverlay == null) {
        break missingId;
      }

      id = R.id.search_id_white;
      ImageView searchIdWhite = ViewBindings.findChildViewById(rootView, id);
      if (searchIdWhite == null) {
        break missingId;
      }

      id = R.id.text_filter;
      TextView textFilter = ViewBindings.findChildViewById(rootView, id);
      if (textFilter == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      return new ActivityMarketSearchStoreBinding((RelativeLayout) rootView, arrowBack, close,
          editNeighborhood, editPriceMax, editPriceMin, editSearch, erase, linLayoutFilter,
          maxPrice, minPrice, neighborhood, parent, relLayout52Max, relLayout52Min, relLayoutFilter,
          relLayoutNeighborhood, relLayoutPriceMax, relLayoutPriceMin, relLayoutSearch,
          relLayoutViewOverlay, searchIdWhite, textFilter, toolBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
