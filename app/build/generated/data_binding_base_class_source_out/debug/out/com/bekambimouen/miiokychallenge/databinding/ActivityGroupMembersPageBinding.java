// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.MyEditText;
import com.bekambimouen.miiokychallenge.Utils.TouchDetectableScrollView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGroupMembersPageBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout arrowBack;

  @NonNull
  public final ImageView imageView1;

  @NonNull
  public final ImageView imageView2;

  @NonNull
  public final LinearLayout linLayout;

  @NonNull
  public final TouchDetectableScrollView nestedScrollView;

  @NonNull
  public final RelativeLayout parent;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final RelativeLayout relLayoutBlocked;

  @NonNull
  public final RelativeLayout relLayoutInvited;

  @NonNull
  public final RelativeLayout relLayoutParameters;

  @NonNull
  public final RelativeLayout relLayoutPerson;

  @NonNull
  public final RelativeLayout relLayoutSearch;

  @NonNull
  public final RelativeLayout relLayoutViewOverlay;

  @NonNull
  public final MyEditText search;

  @NonNull
  public final ImageView searchIdWhite;

  @NonNull
  public final TextView text1;

  @NonNull
  public final Toolbar toolBar;

  @NonNull
  public final TextView toolBarGroupName;

  private ActivityGroupMembersPageBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout arrowBack, @NonNull ImageView imageView1,
      @NonNull ImageView imageView2, @NonNull LinearLayout linLayout,
      @NonNull TouchDetectableScrollView nestedScrollView, @NonNull RelativeLayout parent,
      @NonNull RecyclerView recyclerView, @NonNull RelativeLayout relLayoutBlocked,
      @NonNull RelativeLayout relLayoutInvited, @NonNull RelativeLayout relLayoutParameters,
      @NonNull RelativeLayout relLayoutPerson, @NonNull RelativeLayout relLayoutSearch,
      @NonNull RelativeLayout relLayoutViewOverlay, @NonNull MyEditText search,
      @NonNull ImageView searchIdWhite, @NonNull TextView text1, @NonNull Toolbar toolBar,
      @NonNull TextView toolBarGroupName) {
    this.rootView = rootView;
    this.arrowBack = arrowBack;
    this.imageView1 = imageView1;
    this.imageView2 = imageView2;
    this.linLayout = linLayout;
    this.nestedScrollView = nestedScrollView;
    this.parent = parent;
    this.recyclerView = recyclerView;
    this.relLayoutBlocked = relLayoutBlocked;
    this.relLayoutInvited = relLayoutInvited;
    this.relLayoutParameters = relLayoutParameters;
    this.relLayoutPerson = relLayoutPerson;
    this.relLayoutSearch = relLayoutSearch;
    this.relLayoutViewOverlay = relLayoutViewOverlay;
    this.search = search;
    this.searchIdWhite = searchIdWhite;
    this.text1 = text1;
    this.toolBar = toolBar;
    this.toolBarGroupName = toolBarGroupName;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGroupMembersPageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGroupMembersPageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_group_members_page, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGroupMembersPageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrowBack;
      RelativeLayout arrowBack = ViewBindings.findChildViewById(rootView, id);
      if (arrowBack == null) {
        break missingId;
      }

      id = R.id.imageView1;
      ImageView imageView1 = ViewBindings.findChildViewById(rootView, id);
      if (imageView1 == null) {
        break missingId;
      }

      id = R.id.imageView2;
      ImageView imageView2 = ViewBindings.findChildViewById(rootView, id);
      if (imageView2 == null) {
        break missingId;
      }

      id = R.id.linLayout;
      LinearLayout linLayout = ViewBindings.findChildViewById(rootView, id);
      if (linLayout == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      TouchDetectableScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      RelativeLayout parent = (RelativeLayout) rootView;

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.relLayout_blocked;
      RelativeLayout relLayoutBlocked = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutBlocked == null) {
        break missingId;
      }

      id = R.id.relLayout_invited;
      RelativeLayout relLayoutInvited = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutInvited == null) {
        break missingId;
      }

      id = R.id.relLayout_parameters;
      RelativeLayout relLayoutParameters = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutParameters == null) {
        break missingId;
      }

      id = R.id.relLayout_person;
      RelativeLayout relLayoutPerson = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutPerson == null) {
        break missingId;
      }

      id = R.id.relLayout_search;
      RelativeLayout relLayoutSearch = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutSearch == null) {
        break missingId;
      }

      id = R.id.relLayout_view_overlay;
      RelativeLayout relLayoutViewOverlay = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutViewOverlay == null) {
        break missingId;
      }

      id = R.id.search;
      MyEditText search = ViewBindings.findChildViewById(rootView, id);
      if (search == null) {
        break missingId;
      }

      id = R.id.search_id_white;
      ImageView searchIdWhite = ViewBindings.findChildViewById(rootView, id);
      if (searchIdWhite == null) {
        break missingId;
      }

      id = R.id.text1;
      TextView text1 = ViewBindings.findChildViewById(rootView, id);
      if (text1 == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.toolBar_group_name;
      TextView toolBarGroupName = ViewBindings.findChildViewById(rootView, id);
      if (toolBarGroupName == null) {
        break missingId;
      }

      return new ActivityGroupMembersPageBinding((RelativeLayout) rootView, arrowBack, imageView1,
          imageView2, linLayout, nestedScrollView, parent, recyclerView, relLayoutBlocked,
          relLayoutInvited, relLayoutParameters, relLayoutPerson, relLayoutSearch,
          relLayoutViewOverlay, search, searchIdWhite, text1, toolBar, toolBarGroupName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
