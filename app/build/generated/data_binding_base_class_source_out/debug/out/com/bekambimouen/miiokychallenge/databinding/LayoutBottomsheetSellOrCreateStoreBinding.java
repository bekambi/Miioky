// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.TouchDetectableScrollView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBottomsheetSellOrCreateStoreBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView createABakery;

  @NonNull
  public final TextView createARestaurant;

  @NonNull
  public final TextView createAShop;

  @NonNull
  public final LinearLayout linLayoutCreateABakery;

  @NonNull
  public final LinearLayout linLayoutCreateARestaurant;

  @NonNull
  public final LinearLayout linLayoutCreateAShop;

  @NonNull
  public final LinearLayout linLayoutRent;

  @NonNull
  public final LinearLayout linLayoutSell;

  @NonNull
  public final LinearLayout linLayoutViewBar;

  @NonNull
  public final TouchDetectableScrollView nestedScrollView;

  @NonNull
  public final TextView sell;

  @NonNull
  public final TextView toRentOut;

  private LayoutBottomsheetSellOrCreateStoreBinding(@NonNull LinearLayout rootView,
      @NonNull TextView createABakery, @NonNull TextView createARestaurant,
      @NonNull TextView createAShop, @NonNull LinearLayout linLayoutCreateABakery,
      @NonNull LinearLayout linLayoutCreateARestaurant, @NonNull LinearLayout linLayoutCreateAShop,
      @NonNull LinearLayout linLayoutRent, @NonNull LinearLayout linLayoutSell,
      @NonNull LinearLayout linLayoutViewBar, @NonNull TouchDetectableScrollView nestedScrollView,
      @NonNull TextView sell, @NonNull TextView toRentOut) {
    this.rootView = rootView;
    this.createABakery = createABakery;
    this.createARestaurant = createARestaurant;
    this.createAShop = createAShop;
    this.linLayoutCreateABakery = linLayoutCreateABakery;
    this.linLayoutCreateARestaurant = linLayoutCreateARestaurant;
    this.linLayoutCreateAShop = linLayoutCreateAShop;
    this.linLayoutRent = linLayoutRent;
    this.linLayoutSell = linLayoutSell;
    this.linLayoutViewBar = linLayoutViewBar;
    this.nestedScrollView = nestedScrollView;
    this.sell = sell;
    this.toRentOut = toRentOut;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBottomsheetSellOrCreateStoreBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBottomsheetSellOrCreateStoreBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_bottomsheet_sell_or_create_store, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBottomsheetSellOrCreateStoreBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.create_a_bakery;
      TextView createABakery = ViewBindings.findChildViewById(rootView, id);
      if (createABakery == null) {
        break missingId;
      }

      id = R.id.create_a_restaurant;
      TextView createARestaurant = ViewBindings.findChildViewById(rootView, id);
      if (createARestaurant == null) {
        break missingId;
      }

      id = R.id.create_a_shop;
      TextView createAShop = ViewBindings.findChildViewById(rootView, id);
      if (createAShop == null) {
        break missingId;
      }

      id = R.id.linLayout_create_a_bakery;
      LinearLayout linLayoutCreateABakery = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutCreateABakery == null) {
        break missingId;
      }

      id = R.id.linLayout_create_a_restaurant;
      LinearLayout linLayoutCreateARestaurant = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutCreateARestaurant == null) {
        break missingId;
      }

      id = R.id.linLayout_create_a_shop;
      LinearLayout linLayoutCreateAShop = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutCreateAShop == null) {
        break missingId;
      }

      id = R.id.linLayout_rent;
      LinearLayout linLayoutRent = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutRent == null) {
        break missingId;
      }

      id = R.id.linLayout_sell;
      LinearLayout linLayoutSell = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutSell == null) {
        break missingId;
      }

      id = R.id.linLayout_view_bar;
      LinearLayout linLayoutViewBar = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutViewBar == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      TouchDetectableScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.sell;
      TextView sell = ViewBindings.findChildViewById(rootView, id);
      if (sell == null) {
        break missingId;
      }

      id = R.id.to_rent_out;
      TextView toRentOut = ViewBindings.findChildViewById(rootView, id);
      if (toRentOut == null) {
        break missingId;
      }

      return new LayoutBottomsheetSellOrCreateStoreBinding((LinearLayout) rootView, createABakery,
          createARestaurant, createAShop, linLayoutCreateABakery, linLayoutCreateARestaurant,
          linLayoutCreateAShop, linLayoutRent, linLayoutSell, linLayoutViewBar, nestedScrollView,
          sell, toRentOut);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
