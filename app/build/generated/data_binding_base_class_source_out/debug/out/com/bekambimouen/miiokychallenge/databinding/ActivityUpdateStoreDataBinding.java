// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.MyEditText;
import com.bekambimouen.miiokychallenge.Utils.TouchDetectableScrollView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityUpdateStoreDataBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView about;

  @NonNull
  public final RelativeLayout arrowBack;

  @NonNull
  public final ImageView cameraId;

  @NonNull
  public final ImageView close;

  @NonNull
  public final MyEditText editAboutStore;

  @NonNull
  public final AutoCompleteTextView editNeighborhood;

  @NonNull
  public final MyEditText editStoreName;

  @NonNull
  public final LinearLayout linLayout;

  @NonNull
  public final LinearLayout linLayoutNberCharSequence;

  @NonNull
  public final LinearLayout linLayoutUpdatePhoto;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView nberCharSequence;

  @NonNull
  public final TextView neighborhood;

  @NonNull
  public final TouchDetectableScrollView nestedScrollView;

  @NonNull
  public final RelativeLayout parent;

  @NonNull
  public final ImageView penStart;

  @NonNull
  public final ProgressBar progressbar;

  @NonNull
  public final RelativeLayout relLayoutAbout;

  @NonNull
  public final RelativeLayout relLayoutNeighborhood;

  @NonNull
  public final RelativeLayout relLayoutProfile;

  @NonNull
  public final RelativeLayout relLayoutPubProfilePhoto;

  @NonNull
  public final RelativeLayout relLayoutStoreName;

  @NonNull
  public final RelativeLayout relLayoutUpdate;

  @NonNull
  public final TextView textPublish;

  @NonNull
  public final TextView title;

  @NonNull
  public final Toolbar toolBar;

  @NonNull
  public final TextView toolbarTitle;

  private ActivityUpdateStoreDataBinding(@NonNull RelativeLayout rootView, @NonNull TextView about,
      @NonNull RelativeLayout arrowBack, @NonNull ImageView cameraId, @NonNull ImageView close,
      @NonNull MyEditText editAboutStore, @NonNull AutoCompleteTextView editNeighborhood,
      @NonNull MyEditText editStoreName, @NonNull LinearLayout linLayout,
      @NonNull LinearLayout linLayoutNberCharSequence, @NonNull LinearLayout linLayoutUpdatePhoto,
      @NonNull TextView name, @NonNull TextView nberCharSequence, @NonNull TextView neighborhood,
      @NonNull TouchDetectableScrollView nestedScrollView, @NonNull RelativeLayout parent,
      @NonNull ImageView penStart, @NonNull ProgressBar progressbar,
      @NonNull RelativeLayout relLayoutAbout, @NonNull RelativeLayout relLayoutNeighborhood,
      @NonNull RelativeLayout relLayoutProfile, @NonNull RelativeLayout relLayoutPubProfilePhoto,
      @NonNull RelativeLayout relLayoutStoreName, @NonNull RelativeLayout relLayoutUpdate,
      @NonNull TextView textPublish, @NonNull TextView title, @NonNull Toolbar toolBar,
      @NonNull TextView toolbarTitle) {
    this.rootView = rootView;
    this.about = about;
    this.arrowBack = arrowBack;
    this.cameraId = cameraId;
    this.close = close;
    this.editAboutStore = editAboutStore;
    this.editNeighborhood = editNeighborhood;
    this.editStoreName = editStoreName;
    this.linLayout = linLayout;
    this.linLayoutNberCharSequence = linLayoutNberCharSequence;
    this.linLayoutUpdatePhoto = linLayoutUpdatePhoto;
    this.name = name;
    this.nberCharSequence = nberCharSequence;
    this.neighborhood = neighborhood;
    this.nestedScrollView = nestedScrollView;
    this.parent = parent;
    this.penStart = penStart;
    this.progressbar = progressbar;
    this.relLayoutAbout = relLayoutAbout;
    this.relLayoutNeighborhood = relLayoutNeighborhood;
    this.relLayoutProfile = relLayoutProfile;
    this.relLayoutPubProfilePhoto = relLayoutPubProfilePhoto;
    this.relLayoutStoreName = relLayoutStoreName;
    this.relLayoutUpdate = relLayoutUpdate;
    this.textPublish = textPublish;
    this.title = title;
    this.toolBar = toolBar;
    this.toolbarTitle = toolbarTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityUpdateStoreDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityUpdateStoreDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_update_store_data, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityUpdateStoreDataBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.about;
      TextView about = ViewBindings.findChildViewById(rootView, id);
      if (about == null) {
        break missingId;
      }

      id = R.id.arrowBack;
      RelativeLayout arrowBack = ViewBindings.findChildViewById(rootView, id);
      if (arrowBack == null) {
        break missingId;
      }

      id = R.id.camera_id;
      ImageView cameraId = ViewBindings.findChildViewById(rootView, id);
      if (cameraId == null) {
        break missingId;
      }

      id = R.id.close;
      ImageView close = ViewBindings.findChildViewById(rootView, id);
      if (close == null) {
        break missingId;
      }

      id = R.id.edit_about_store;
      MyEditText editAboutStore = ViewBindings.findChildViewById(rootView, id);
      if (editAboutStore == null) {
        break missingId;
      }

      id = R.id.edit_neighborhood;
      AutoCompleteTextView editNeighborhood = ViewBindings.findChildViewById(rootView, id);
      if (editNeighborhood == null) {
        break missingId;
      }

      id = R.id.edit_store_name;
      MyEditText editStoreName = ViewBindings.findChildViewById(rootView, id);
      if (editStoreName == null) {
        break missingId;
      }

      id = R.id.linLayout;
      LinearLayout linLayout = ViewBindings.findChildViewById(rootView, id);
      if (linLayout == null) {
        break missingId;
      }

      id = R.id.linLayout_nber_char_sequence;
      LinearLayout linLayoutNberCharSequence = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutNberCharSequence == null) {
        break missingId;
      }

      id = R.id.linLayout_update_photo;
      LinearLayout linLayoutUpdatePhoto = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutUpdatePhoto == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.nber_char_sequence;
      TextView nberCharSequence = ViewBindings.findChildViewById(rootView, id);
      if (nberCharSequence == null) {
        break missingId;
      }

      id = R.id.neighborhood;
      TextView neighborhood = ViewBindings.findChildViewById(rootView, id);
      if (neighborhood == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      TouchDetectableScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      RelativeLayout parent = (RelativeLayout) rootView;

      id = R.id.penStart;
      ImageView penStart = ViewBindings.findChildViewById(rootView, id);
      if (penStart == null) {
        break missingId;
      }

      id = R.id.progressbar;
      ProgressBar progressbar = ViewBindings.findChildViewById(rootView, id);
      if (progressbar == null) {
        break missingId;
      }

      id = R.id.relLayout_about;
      RelativeLayout relLayoutAbout = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutAbout == null) {
        break missingId;
      }

      id = R.id.relLayout_neighborhood;
      RelativeLayout relLayoutNeighborhood = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutNeighborhood == null) {
        break missingId;
      }

      id = R.id.relLayout_profile;
      RelativeLayout relLayoutProfile = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutProfile == null) {
        break missingId;
      }

      id = R.id.relLayout_pub_profile_photo;
      RelativeLayout relLayoutPubProfilePhoto = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutPubProfilePhoto == null) {
        break missingId;
      }

      id = R.id.relLayout_store_name;
      RelativeLayout relLayoutStoreName = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutStoreName == null) {
        break missingId;
      }

      id = R.id.relLayout_update;
      RelativeLayout relLayoutUpdate = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutUpdate == null) {
        break missingId;
      }

      id = R.id.text_publish;
      TextView textPublish = ViewBindings.findChildViewById(rootView, id);
      if (textPublish == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.toolbar_title;
      TextView toolbarTitle = ViewBindings.findChildViewById(rootView, id);
      if (toolbarTitle == null) {
        break missingId;
      }

      return new ActivityUpdateStoreDataBinding((RelativeLayout) rootView, about, arrowBack,
          cameraId, close, editAboutStore, editNeighborhood, editStoreName, linLayout,
          linLayoutNberCharSequence, linLayoutUpdatePhoto, name, nberCharSequence, neighborhood,
          nestedScrollView, parent, penStart, progressbar, relLayoutAbout, relLayoutNeighborhood,
          relLayoutProfile, relLayoutPubProfilePhoto, relLayoutStoreName, relLayoutUpdate,
          textPublish, title, toolBar, toolbarTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
