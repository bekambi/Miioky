// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentChallengesBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout linLayoutChallenges;

  @NonNull
  public final LinearLayout linLayoutCreate;

  @NonNull
  public final LinearLayout linLayoutDiscover;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final RelativeLayout relLayoutBoard;

  @NonNull
  public final RelativeLayout relLayoutChallenges;

  @NonNull
  public final RelativeLayout relLayoutCreate;

  @NonNull
  public final RelativeLayout relLayoutDiscover;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  private FragmentChallengesBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout linLayoutChallenges, @NonNull LinearLayout linLayoutCreate,
      @NonNull LinearLayout linLayoutDiscover, @NonNull ProgressBar progressBar,
      @NonNull RecyclerView recyclerView, @NonNull RelativeLayout relLayoutBoard,
      @NonNull RelativeLayout relLayoutChallenges, @NonNull RelativeLayout relLayoutCreate,
      @NonNull RelativeLayout relLayoutDiscover, @NonNull SwipeRefreshLayout swipeRefreshLayout) {
    this.rootView = rootView;
    this.linLayoutChallenges = linLayoutChallenges;
    this.linLayoutCreate = linLayoutCreate;
    this.linLayoutDiscover = linLayoutDiscover;
    this.progressBar = progressBar;
    this.recyclerView = recyclerView;
    this.relLayoutBoard = relLayoutBoard;
    this.relLayoutChallenges = relLayoutChallenges;
    this.relLayoutCreate = relLayoutCreate;
    this.relLayoutDiscover = relLayoutDiscover;
    this.swipeRefreshLayout = swipeRefreshLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentChallengesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentChallengesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_challenges, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentChallengesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.linLayout_challenges;
      LinearLayout linLayoutChallenges = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutChallenges == null) {
        break missingId;
      }

      id = R.id.linLayout_create;
      LinearLayout linLayoutCreate = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutCreate == null) {
        break missingId;
      }

      id = R.id.linLayout_discover;
      LinearLayout linLayoutDiscover = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutDiscover == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.relLayout_board;
      RelativeLayout relLayoutBoard = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutBoard == null) {
        break missingId;
      }

      id = R.id.relLayout_challenges;
      RelativeLayout relLayoutChallenges = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutChallenges == null) {
        break missingId;
      }

      id = R.id.relLayout_create;
      RelativeLayout relLayoutCreate = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutCreate == null) {
        break missingId;
      }

      id = R.id.relLayout_discover;
      RelativeLayout relLayoutDiscover = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutDiscover == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      return new FragmentChallengesBinding((RelativeLayout) rootView, linLayoutChallenges,
          linLayoutCreate, linLayoutDiscover, progressBar, recyclerView, relLayoutBoard,
          relLayoutChallenges, relLayoutCreate, relLayoutDiscover, swipeRefreshLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
