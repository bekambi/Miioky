// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.appcompat.widget.SwitchCompat;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.MyEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SnippetPubChallengeDownloadPhotoBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final ImageView arrowDown;

  @NonNull
  public final CardView cardViewDeux;

  @NonNull
  public final CardView cardViewUn;

  @NonNull
  public final MyEditText deuxEditText;

  @NonNull
  public final FrameLayout frameBattleVideosDeux;

  @NonNull
  public final FrameLayout frameUn;

  @NonNull
  public final TextView lS;

  @NonNull
  public final TextView lV;

  @NonNull
  public final LinearLayout linearDeuxEditext;

  @NonNull
  public final ProgressBar progressbar;

  @NonNull
  public final RelativeLayout relLayout6;

  @NonNull
  public final RelativeLayout relLayoutArrowBackCategory;

  @NonNull
  public final RelativeLayout relLayoutCategory;

  @NonNull
  public final RelativeLayout relLayoutGoChooseFollowers;

  @NonNull
  public final RelativeLayout relLayoutPublish;

  @NonNull
  public final SwitchCompat switchButton;

  @NonNull
  public final TextView textExplainChallenge;

  @NonNull
  public final ImageView thumbnailDeux;

  @NonNull
  public final ImageView thumbnailUn;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView txtCategory;

  @NonNull
  public final RelativeLayout txtVS;

  @NonNull
  public final MyEditText unEditText;

  private SnippetPubChallengeDownloadPhotoBinding(@NonNull View rootView,
      @NonNull ImageView arrowDown, @NonNull CardView cardViewDeux, @NonNull CardView cardViewUn,
      @NonNull MyEditText deuxEditText, @NonNull FrameLayout frameBattleVideosDeux,
      @NonNull FrameLayout frameUn, @NonNull TextView lS, @NonNull TextView lV,
      @NonNull LinearLayout linearDeuxEditext, @NonNull ProgressBar progressbar,
      @NonNull RelativeLayout relLayout6, @NonNull RelativeLayout relLayoutArrowBackCategory,
      @NonNull RelativeLayout relLayoutCategory, @NonNull RelativeLayout relLayoutGoChooseFollowers,
      @NonNull RelativeLayout relLayoutPublish, @NonNull SwitchCompat switchButton,
      @NonNull TextView textExplainChallenge, @NonNull ImageView thumbnailDeux,
      @NonNull ImageView thumbnailUn, @NonNull Toolbar toolbar, @NonNull TextView txtCategory,
      @NonNull RelativeLayout txtVS, @NonNull MyEditText unEditText) {
    this.rootView = rootView;
    this.arrowDown = arrowDown;
    this.cardViewDeux = cardViewDeux;
    this.cardViewUn = cardViewUn;
    this.deuxEditText = deuxEditText;
    this.frameBattleVideosDeux = frameBattleVideosDeux;
    this.frameUn = frameUn;
    this.lS = lS;
    this.lV = lV;
    this.linearDeuxEditext = linearDeuxEditext;
    this.progressbar = progressbar;
    this.relLayout6 = relLayout6;
    this.relLayoutArrowBackCategory = relLayoutArrowBackCategory;
    this.relLayoutCategory = relLayoutCategory;
    this.relLayoutGoChooseFollowers = relLayoutGoChooseFollowers;
    this.relLayoutPublish = relLayoutPublish;
    this.switchButton = switchButton;
    this.textExplainChallenge = textExplainChallenge;
    this.thumbnailDeux = thumbnailDeux;
    this.thumbnailUn = thumbnailUn;
    this.toolbar = toolbar;
    this.txtCategory = txtCategory;
    this.txtVS = txtVS;
    this.unEditText = unEditText;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static SnippetPubChallengeDownloadPhotoBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.snippet_pub_challenge_download_photo, parent);
    return bind(parent);
  }

  @NonNull
  public static SnippetPubChallengeDownloadPhotoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrow_down;
      ImageView arrowDown = ViewBindings.findChildViewById(rootView, id);
      if (arrowDown == null) {
        break missingId;
      }

      id = R.id.cardView_deux;
      CardView cardViewDeux = ViewBindings.findChildViewById(rootView, id);
      if (cardViewDeux == null) {
        break missingId;
      }

      id = R.id.cardView_un;
      CardView cardViewUn = ViewBindings.findChildViewById(rootView, id);
      if (cardViewUn == null) {
        break missingId;
      }

      id = R.id.deux_editText;
      MyEditText deuxEditText = ViewBindings.findChildViewById(rootView, id);
      if (deuxEditText == null) {
        break missingId;
      }

      id = R.id.frame_battle_videos_deux;
      FrameLayout frameBattleVideosDeux = ViewBindings.findChildViewById(rootView, id);
      if (frameBattleVideosDeux == null) {
        break missingId;
      }

      id = R.id.frame_un;
      FrameLayout frameUn = ViewBindings.findChildViewById(rootView, id);
      if (frameUn == null) {
        break missingId;
      }

      id = R.id.l_s;
      TextView lS = ViewBindings.findChildViewById(rootView, id);
      if (lS == null) {
        break missingId;
      }

      id = R.id.l_v;
      TextView lV = ViewBindings.findChildViewById(rootView, id);
      if (lV == null) {
        break missingId;
      }

      id = R.id.linear_deux_editext;
      LinearLayout linearDeuxEditext = ViewBindings.findChildViewById(rootView, id);
      if (linearDeuxEditext == null) {
        break missingId;
      }

      id = R.id.progressbar;
      ProgressBar progressbar = ViewBindings.findChildViewById(rootView, id);
      if (progressbar == null) {
        break missingId;
      }

      id = R.id.relLayout6;
      RelativeLayout relLayout6 = ViewBindings.findChildViewById(rootView, id);
      if (relLayout6 == null) {
        break missingId;
      }

      id = R.id.relLayout_arrowBack_category;
      RelativeLayout relLayoutArrowBackCategory = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutArrowBackCategory == null) {
        break missingId;
      }

      id = R.id.relLayout_category;
      RelativeLayout relLayoutCategory = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutCategory == null) {
        break missingId;
      }

      id = R.id.relLayout_go_choose_followers;
      RelativeLayout relLayoutGoChooseFollowers = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutGoChooseFollowers == null) {
        break missingId;
      }

      id = R.id.relLayout_publish;
      RelativeLayout relLayoutPublish = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutPublish == null) {
        break missingId;
      }

      id = R.id.switchButton;
      SwitchCompat switchButton = ViewBindings.findChildViewById(rootView, id);
      if (switchButton == null) {
        break missingId;
      }

      id = R.id.text_explain_challenge;
      TextView textExplainChallenge = ViewBindings.findChildViewById(rootView, id);
      if (textExplainChallenge == null) {
        break missingId;
      }

      id = R.id.thumbnail_deux;
      ImageView thumbnailDeux = ViewBindings.findChildViewById(rootView, id);
      if (thumbnailDeux == null) {
        break missingId;
      }

      id = R.id.thumbnail_un;
      ImageView thumbnailUn = ViewBindings.findChildViewById(rootView, id);
      if (thumbnailUn == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.txt_category;
      TextView txtCategory = ViewBindings.findChildViewById(rootView, id);
      if (txtCategory == null) {
        break missingId;
      }

      id = R.id.txt_VS;
      RelativeLayout txtVS = ViewBindings.findChildViewById(rootView, id);
      if (txtVS == null) {
        break missingId;
      }

      id = R.id.un_editText;
      MyEditText unEditText = ViewBindings.findChildViewById(rootView, id);
      if (unEditText == null) {
        break missingId;
      }

      return new SnippetPubChallengeDownloadPhotoBinding(rootView, arrowDown, cardViewDeux,
          cardViewUn, deuxEditText, frameBattleVideosDeux, frameUn, lS, lV, linearDeuxEditext,
          progressbar, relLayout6, relLayoutArrowBackCategory, relLayoutCategory,
          relLayoutGoChooseFollowers, relLayoutPublish, switchButton, textExplainChallenge,
          thumbnailDeux, thumbnailUn, toolbar, txtCategory, txtVS, unEditText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
