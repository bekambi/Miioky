// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.MyEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPublicationFunBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout arrowBackPubFun;

  @NonNull
  public final MyEditText decrisTaVideoFun;

  @NonNull
  public final RelativeLayout parent;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RelativeLayout relLayoutImgPlayUn;

  @NonNull
  public final RelativeLayout relLayoutPublish;

  @NonNull
  public final RelativeLayout relLayoutViewOverlay;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView tvPublish;

  @NonNull
  public final ImageView videoThumbPublierFun;

  private ActivityPublicationFunBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout arrowBackPubFun, @NonNull MyEditText decrisTaVideoFun,
      @NonNull RelativeLayout parent, @NonNull ProgressBar progressBar,
      @NonNull RelativeLayout relLayoutImgPlayUn, @NonNull RelativeLayout relLayoutPublish,
      @NonNull RelativeLayout relLayoutViewOverlay, @NonNull Toolbar toolbar,
      @NonNull TextView tvPublish, @NonNull ImageView videoThumbPublierFun) {
    this.rootView = rootView;
    this.arrowBackPubFun = arrowBackPubFun;
    this.decrisTaVideoFun = decrisTaVideoFun;
    this.parent = parent;
    this.progressBar = progressBar;
    this.relLayoutImgPlayUn = relLayoutImgPlayUn;
    this.relLayoutPublish = relLayoutPublish;
    this.relLayoutViewOverlay = relLayoutViewOverlay;
    this.toolbar = toolbar;
    this.tvPublish = tvPublish;
    this.videoThumbPublierFun = videoThumbPublierFun;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPublicationFunBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPublicationFunBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_publication_fun, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPublicationFunBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrowBack_pub_fun;
      RelativeLayout arrowBackPubFun = ViewBindings.findChildViewById(rootView, id);
      if (arrowBackPubFun == null) {
        break missingId;
      }

      id = R.id.decris_ta_video_fun;
      MyEditText decrisTaVideoFun = ViewBindings.findChildViewById(rootView, id);
      if (decrisTaVideoFun == null) {
        break missingId;
      }

      RelativeLayout parent = (RelativeLayout) rootView;

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.relLayout_img_play_un;
      RelativeLayout relLayoutImgPlayUn = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutImgPlayUn == null) {
        break missingId;
      }

      id = R.id.relLayout_publish;
      RelativeLayout relLayoutPublish = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutPublish == null) {
        break missingId;
      }

      id = R.id.relLayout_view_overlay;
      RelativeLayout relLayoutViewOverlay = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutViewOverlay == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tv_publish;
      TextView tvPublish = ViewBindings.findChildViewById(rootView, id);
      if (tvPublish == null) {
        break missingId;
      }

      id = R.id.videoThumb_publier_fun;
      ImageView videoThumbPublierFun = ViewBindings.findChildViewById(rootView, id);
      if (videoThumbPublierFun == null) {
        break missingId;
      }

      return new ActivityPublicationFunBinding((RelativeLayout) rootView, arrowBackPubFun,
          decrisTaVideoFun, parent, progressBar, relLayoutImgPlayUn, relLayoutPublish,
          relLayoutViewOverlay, toolbar, tvPublish, videoThumbPublierFun);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
