// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutDialogMarketResultSearchModifyTheParametersBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView cancel;

  @NonNull
  public final AutoCompleteTextView editNeighborhoodName;

  @NonNull
  public final AutoCompleteTextView editTownName;

  @NonNull
  public final TextView neighborhoodName;

  @NonNull
  public final RelativeLayout relLayoutNeighborhoodName;

  @NonNull
  public final RelativeLayout relLayoutTownName;

  @NonNull
  public final RelativeLayout relLayoutUpdateNeighborhoodName;

  @NonNull
  public final RelativeLayout relLayoutUpdateTownName;

  @NonNull
  public final TextView townName;

  @NonNull
  public final TextView update;

  private LayoutDialogMarketResultSearchModifyTheParametersBinding(@NonNull LinearLayout rootView,
      @NonNull TextView cancel, @NonNull AutoCompleteTextView editNeighborhoodName,
      @NonNull AutoCompleteTextView editTownName, @NonNull TextView neighborhoodName,
      @NonNull RelativeLayout relLayoutNeighborhoodName, @NonNull RelativeLayout relLayoutTownName,
      @NonNull RelativeLayout relLayoutUpdateNeighborhoodName,
      @NonNull RelativeLayout relLayoutUpdateTownName, @NonNull TextView townName,
      @NonNull TextView update) {
    this.rootView = rootView;
    this.cancel = cancel;
    this.editNeighborhoodName = editNeighborhoodName;
    this.editTownName = editTownName;
    this.neighborhoodName = neighborhoodName;
    this.relLayoutNeighborhoodName = relLayoutNeighborhoodName;
    this.relLayoutTownName = relLayoutTownName;
    this.relLayoutUpdateNeighborhoodName = relLayoutUpdateNeighborhoodName;
    this.relLayoutUpdateTownName = relLayoutUpdateTownName;
    this.townName = townName;
    this.update = update;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutDialogMarketResultSearchModifyTheParametersBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutDialogMarketResultSearchModifyTheParametersBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_dialog_market_result_search_modify_the_parameters, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutDialogMarketResultSearchModifyTheParametersBinding bind(
      @NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancel;
      TextView cancel = ViewBindings.findChildViewById(rootView, id);
      if (cancel == null) {
        break missingId;
      }

      id = R.id.edit_neighborhood_name;
      AutoCompleteTextView editNeighborhoodName = ViewBindings.findChildViewById(rootView, id);
      if (editNeighborhoodName == null) {
        break missingId;
      }

      id = R.id.edit_town_name;
      AutoCompleteTextView editTownName = ViewBindings.findChildViewById(rootView, id);
      if (editTownName == null) {
        break missingId;
      }

      id = R.id.neighborhood_name;
      TextView neighborhoodName = ViewBindings.findChildViewById(rootView, id);
      if (neighborhoodName == null) {
        break missingId;
      }

      id = R.id.relLayout_neighborhood_name;
      RelativeLayout relLayoutNeighborhoodName = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutNeighborhoodName == null) {
        break missingId;
      }

      id = R.id.relLayout_town_name;
      RelativeLayout relLayoutTownName = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutTownName == null) {
        break missingId;
      }

      id = R.id.relLayout_update_neighborhood_name;
      RelativeLayout relLayoutUpdateNeighborhoodName = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutUpdateNeighborhoodName == null) {
        break missingId;
      }

      id = R.id.relLayout_update_town_name;
      RelativeLayout relLayoutUpdateTownName = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutUpdateTownName == null) {
        break missingId;
      }

      id = R.id.town_name;
      TextView townName = ViewBindings.findChildViewById(rootView, id);
      if (townName == null) {
        break missingId;
      }

      id = R.id.update;
      TextView update = ViewBindings.findChildViewById(rootView, id);
      if (update == null) {
        break missingId;
      }

      return new LayoutDialogMarketResultSearchModifyTheParametersBinding((LinearLayout) rootView,
          cancel, editNeighborhoodName, editTownName, neighborhoodName, relLayoutNeighborhoodName,
          relLayoutTownName, relLayoutUpdateNeighborhoodName, relLayoutUpdateTownName, townName,
          update);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
