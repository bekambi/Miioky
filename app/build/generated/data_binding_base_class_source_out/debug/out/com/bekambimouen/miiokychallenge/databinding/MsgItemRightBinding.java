// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.messages.util.RoundRectCornerImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MsgItemRightBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView date;

  @NonNull
  public final RelativeLayout deletedComment;

  @NonNull
  public final ImageView doneImgOne;

  @NonNull
  public final ImageView doneMsgOne;

  @NonNull
  public final ImageView donePhotoOne;

  @NonNull
  public final ImageView doneVoiceOne;

  @NonNull
  public final TextView hour;

  @NonNull
  public final TextView hourPhoto;

  @NonNull
  public final TextView hourPhotoSimple;

  @NonNull
  public final RoundRectCornerImageView image;

  @NonNull
  public final RoundRectCornerImageView imageSimple;

  @NonNull
  public final ImageView imgPlay;

  @NonNull
  public final LinearLayout linHourPhoto;

  @NonNull
  public final LinearLayout linLayout;

  @NonNull
  public final LinearLayout linLayout2;

  @NonNull
  public final LinearLayout linLayoutSimpleMessage;

  @NonNull
  public final LinearLayout llListitem;

  @NonNull
  public final ProgressBar pbProgressAction;

  @NonNull
  public final RelativeLayout relLayout;

  @NonNull
  public final RelativeLayout relLayoutPhotoSimple;

  @NonNull
  public final TextView showMessage;

  @NonNull
  public final TextView showMessagePhoto;

  @NonNull
  public final TextView voiceHour;

  private MsgItemRightBinding(@NonNull LinearLayout rootView, @NonNull TextView date,
      @NonNull RelativeLayout deletedComment, @NonNull ImageView doneImgOne,
      @NonNull ImageView doneMsgOne, @NonNull ImageView donePhotoOne,
      @NonNull ImageView doneVoiceOne, @NonNull TextView hour, @NonNull TextView hourPhoto,
      @NonNull TextView hourPhotoSimple, @NonNull RoundRectCornerImageView image,
      @NonNull RoundRectCornerImageView imageSimple, @NonNull ImageView imgPlay,
      @NonNull LinearLayout linHourPhoto, @NonNull LinearLayout linLayout,
      @NonNull LinearLayout linLayout2, @NonNull LinearLayout linLayoutSimpleMessage,
      @NonNull LinearLayout llListitem, @NonNull ProgressBar pbProgressAction,
      @NonNull RelativeLayout relLayout, @NonNull RelativeLayout relLayoutPhotoSimple,
      @NonNull TextView showMessage, @NonNull TextView showMessagePhoto,
      @NonNull TextView voiceHour) {
    this.rootView = rootView;
    this.date = date;
    this.deletedComment = deletedComment;
    this.doneImgOne = doneImgOne;
    this.doneMsgOne = doneMsgOne;
    this.donePhotoOne = donePhotoOne;
    this.doneVoiceOne = doneVoiceOne;
    this.hour = hour;
    this.hourPhoto = hourPhoto;
    this.hourPhotoSimple = hourPhotoSimple;
    this.image = image;
    this.imageSimple = imageSimple;
    this.imgPlay = imgPlay;
    this.linHourPhoto = linHourPhoto;
    this.linLayout = linLayout;
    this.linLayout2 = linLayout2;
    this.linLayoutSimpleMessage = linLayoutSimpleMessage;
    this.llListitem = llListitem;
    this.pbProgressAction = pbProgressAction;
    this.relLayout = relLayout;
    this.relLayoutPhotoSimple = relLayoutPhotoSimple;
    this.showMessage = showMessage;
    this.showMessagePhoto = showMessagePhoto;
    this.voiceHour = voiceHour;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MsgItemRightBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MsgItemRightBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.msg_item_right, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MsgItemRightBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.date;
      TextView date = ViewBindings.findChildViewById(rootView, id);
      if (date == null) {
        break missingId;
      }

      id = R.id.deleted_comment;
      RelativeLayout deletedComment = ViewBindings.findChildViewById(rootView, id);
      if (deletedComment == null) {
        break missingId;
      }

      id = R.id.done_img_one;
      ImageView doneImgOne = ViewBindings.findChildViewById(rootView, id);
      if (doneImgOne == null) {
        break missingId;
      }

      id = R.id.done_msg_one;
      ImageView doneMsgOne = ViewBindings.findChildViewById(rootView, id);
      if (doneMsgOne == null) {
        break missingId;
      }

      id = R.id.done_photo_one;
      ImageView donePhotoOne = ViewBindings.findChildViewById(rootView, id);
      if (donePhotoOne == null) {
        break missingId;
      }

      id = R.id.done_voice_one;
      ImageView doneVoiceOne = ViewBindings.findChildViewById(rootView, id);
      if (doneVoiceOne == null) {
        break missingId;
      }

      id = R.id.hour;
      TextView hour = ViewBindings.findChildViewById(rootView, id);
      if (hour == null) {
        break missingId;
      }

      id = R.id.hourPhoto;
      TextView hourPhoto = ViewBindings.findChildViewById(rootView, id);
      if (hourPhoto == null) {
        break missingId;
      }

      id = R.id.hourPhotoSimple;
      TextView hourPhotoSimple = ViewBindings.findChildViewById(rootView, id);
      if (hourPhotoSimple == null) {
        break missingId;
      }

      id = R.id.image;
      RoundRectCornerImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.imageSimple;
      RoundRectCornerImageView imageSimple = ViewBindings.findChildViewById(rootView, id);
      if (imageSimple == null) {
        break missingId;
      }

      id = R.id.img_play;
      ImageView imgPlay = ViewBindings.findChildViewById(rootView, id);
      if (imgPlay == null) {
        break missingId;
      }

      id = R.id.lin_hourPhoto;
      LinearLayout linHourPhoto = ViewBindings.findChildViewById(rootView, id);
      if (linHourPhoto == null) {
        break missingId;
      }

      id = R.id.linLayout;
      LinearLayout linLayout = ViewBindings.findChildViewById(rootView, id);
      if (linLayout == null) {
        break missingId;
      }

      id = R.id.linLayout2;
      LinearLayout linLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (linLayout2 == null) {
        break missingId;
      }

      id = R.id.linLayout_simple_message;
      LinearLayout linLayoutSimpleMessage = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutSimpleMessage == null) {
        break missingId;
      }

      id = R.id.ll_listitem;
      LinearLayout llListitem = ViewBindings.findChildViewById(rootView, id);
      if (llListitem == null) {
        break missingId;
      }

      id = R.id.pbProgressAction;
      ProgressBar pbProgressAction = ViewBindings.findChildViewById(rootView, id);
      if (pbProgressAction == null) {
        break missingId;
      }

      id = R.id.relLayout;
      RelativeLayout relLayout = ViewBindings.findChildViewById(rootView, id);
      if (relLayout == null) {
        break missingId;
      }

      id = R.id.relLayout_photo_simple;
      RelativeLayout relLayoutPhotoSimple = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutPhotoSimple == null) {
        break missingId;
      }

      id = R.id.showMessage;
      TextView showMessage = ViewBindings.findChildViewById(rootView, id);
      if (showMessage == null) {
        break missingId;
      }

      id = R.id.showMessagePhoto;
      TextView showMessagePhoto = ViewBindings.findChildViewById(rootView, id);
      if (showMessagePhoto == null) {
        break missingId;
      }

      id = R.id.voice_hour;
      TextView voiceHour = ViewBindings.findChildViewById(rootView, id);
      if (voiceHour == null) {
        break missingId;
      }

      return new MsgItemRightBinding((LinearLayout) rootView, date, deletedComment, doneImgOne,
          doneMsgOne, donePhotoOne, doneVoiceOne, hour, hourPhoto, hourPhotoSimple, image,
          imageSimple, imgPlay, linHourPhoto, linLayout, linLayout2, linLayoutSimpleMessage,
          llListitem, pbProgressAction, relLayout, relLayoutPhotoSimple, showMessage,
          showMessagePhoto, voiceHour);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
