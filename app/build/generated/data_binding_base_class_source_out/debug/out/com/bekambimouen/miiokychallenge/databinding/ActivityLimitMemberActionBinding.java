// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.MyEditText;
import com.bekambimouen.miiokychallenge.Utils.TouchDetectableScrollView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityLimitMemberActionBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout arrowBack;

  @NonNull
  public final TextView buttonCancel;

  @NonNull
  public final TextView buttonSave;

  @NonNull
  public final ImageView close;

  @NonNull
  public final MyEditText editAboutGroup;

  @NonNull
  public final LinearLayout linLayoutAdminNotes;

  @NonNull
  public final LinearLayout linLayoutButtons;

  @NonNull
  public final LinearLayout linLayoutLimitComments;

  @NonNull
  public final LinearLayout linLayoutLimitMemberActivities;

  @NonNull
  public final LinearLayout linLayoutLimitPosts;

  @NonNull
  public final LinearLayout linLayoutNberCharSequence;

  @NonNull
  public final TextView nberCharSequence;

  @NonNull
  public final TouchDetectableScrollView nestedScrollView;

  @NonNull
  public final RelativeLayout parent;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final RelativeLayout relLayoutEditAboutGroup;

  @NonNull
  public final Spinner spinnerCustomLimitCommentsExpiration;

  @NonNull
  public final Spinner spinnerCustomLimitPostsExpiration;

  @NonNull
  public final Spinner spinnerCustomNumberComments;

  @NonNull
  public final Spinner spinnerCustomNumberPosts;

  @NonNull
  public final SwitchCompat switchCompatNumberComments;

  @NonNull
  public final SwitchCompat switchCompatNumberPosts;

  @NonNull
  public final Toolbar toolBar;

  @NonNull
  public final TextView toolBarTextview;

  @NonNull
  public final TextView tvAddComment;

  @NonNull
  public final TextView tvFirstInformation;

  @NonNull
  public final TextView tvNonRespectedRules;

  private ActivityLimitMemberActionBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout arrowBack, @NonNull TextView buttonCancel,
      @NonNull TextView buttonSave, @NonNull ImageView close, @NonNull MyEditText editAboutGroup,
      @NonNull LinearLayout linLayoutAdminNotes, @NonNull LinearLayout linLayoutButtons,
      @NonNull LinearLayout linLayoutLimitComments,
      @NonNull LinearLayout linLayoutLimitMemberActivities,
      @NonNull LinearLayout linLayoutLimitPosts, @NonNull LinearLayout linLayoutNberCharSequence,
      @NonNull TextView nberCharSequence, @NonNull TouchDetectableScrollView nestedScrollView,
      @NonNull RelativeLayout parent, @NonNull RecyclerView recyclerView,
      @NonNull RelativeLayout relLayoutEditAboutGroup,
      @NonNull Spinner spinnerCustomLimitCommentsExpiration,
      @NonNull Spinner spinnerCustomLimitPostsExpiration,
      @NonNull Spinner spinnerCustomNumberComments, @NonNull Spinner spinnerCustomNumberPosts,
      @NonNull SwitchCompat switchCompatNumberComments,
      @NonNull SwitchCompat switchCompatNumberPosts, @NonNull Toolbar toolBar,
      @NonNull TextView toolBarTextview, @NonNull TextView tvAddComment,
      @NonNull TextView tvFirstInformation, @NonNull TextView tvNonRespectedRules) {
    this.rootView = rootView;
    this.arrowBack = arrowBack;
    this.buttonCancel = buttonCancel;
    this.buttonSave = buttonSave;
    this.close = close;
    this.editAboutGroup = editAboutGroup;
    this.linLayoutAdminNotes = linLayoutAdminNotes;
    this.linLayoutButtons = linLayoutButtons;
    this.linLayoutLimitComments = linLayoutLimitComments;
    this.linLayoutLimitMemberActivities = linLayoutLimitMemberActivities;
    this.linLayoutLimitPosts = linLayoutLimitPosts;
    this.linLayoutNberCharSequence = linLayoutNberCharSequence;
    this.nberCharSequence = nberCharSequence;
    this.nestedScrollView = nestedScrollView;
    this.parent = parent;
    this.recyclerView = recyclerView;
    this.relLayoutEditAboutGroup = relLayoutEditAboutGroup;
    this.spinnerCustomLimitCommentsExpiration = spinnerCustomLimitCommentsExpiration;
    this.spinnerCustomLimitPostsExpiration = spinnerCustomLimitPostsExpiration;
    this.spinnerCustomNumberComments = spinnerCustomNumberComments;
    this.spinnerCustomNumberPosts = spinnerCustomNumberPosts;
    this.switchCompatNumberComments = switchCompatNumberComments;
    this.switchCompatNumberPosts = switchCompatNumberPosts;
    this.toolBar = toolBar;
    this.toolBarTextview = toolBarTextview;
    this.tvAddComment = tvAddComment;
    this.tvFirstInformation = tvFirstInformation;
    this.tvNonRespectedRules = tvNonRespectedRules;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLimitMemberActionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLimitMemberActionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_limit_member_action, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLimitMemberActionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrowBack;
      RelativeLayout arrowBack = ViewBindings.findChildViewById(rootView, id);
      if (arrowBack == null) {
        break missingId;
      }

      id = R.id.button_cancel;
      TextView buttonCancel = ViewBindings.findChildViewById(rootView, id);
      if (buttonCancel == null) {
        break missingId;
      }

      id = R.id.button_save;
      TextView buttonSave = ViewBindings.findChildViewById(rootView, id);
      if (buttonSave == null) {
        break missingId;
      }

      id = R.id.close;
      ImageView close = ViewBindings.findChildViewById(rootView, id);
      if (close == null) {
        break missingId;
      }

      id = R.id.edit_about_group;
      MyEditText editAboutGroup = ViewBindings.findChildViewById(rootView, id);
      if (editAboutGroup == null) {
        break missingId;
      }

      id = R.id.linLayout_admin_notes;
      LinearLayout linLayoutAdminNotes = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutAdminNotes == null) {
        break missingId;
      }

      id = R.id.linLayout_buttons;
      LinearLayout linLayoutButtons = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutButtons == null) {
        break missingId;
      }

      id = R.id.linLayout_limit_comments;
      LinearLayout linLayoutLimitComments = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutLimitComments == null) {
        break missingId;
      }

      id = R.id.linLayout_limit_member_activities;
      LinearLayout linLayoutLimitMemberActivities = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutLimitMemberActivities == null) {
        break missingId;
      }

      id = R.id.linLayout_limit_posts;
      LinearLayout linLayoutLimitPosts = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutLimitPosts == null) {
        break missingId;
      }

      id = R.id.linLayout_nber_char_sequence;
      LinearLayout linLayoutNberCharSequence = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutNberCharSequence == null) {
        break missingId;
      }

      id = R.id.nber_char_sequence;
      TextView nberCharSequence = ViewBindings.findChildViewById(rootView, id);
      if (nberCharSequence == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      TouchDetectableScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      RelativeLayout parent = (RelativeLayout) rootView;

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.relLayout_edit_about_group;
      RelativeLayout relLayoutEditAboutGroup = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutEditAboutGroup == null) {
        break missingId;
      }

      id = R.id.spinnerCustom_limit_comments_expiration;
      Spinner spinnerCustomLimitCommentsExpiration = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCustomLimitCommentsExpiration == null) {
        break missingId;
      }

      id = R.id.spinnerCustom_limit_posts_expiration;
      Spinner spinnerCustomLimitPostsExpiration = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCustomLimitPostsExpiration == null) {
        break missingId;
      }

      id = R.id.spinnerCustom_number_comments;
      Spinner spinnerCustomNumberComments = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCustomNumberComments == null) {
        break missingId;
      }

      id = R.id.spinnerCustom_number_posts;
      Spinner spinnerCustomNumberPosts = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCustomNumberPosts == null) {
        break missingId;
      }

      id = R.id.switchCompat_number_comments;
      SwitchCompat switchCompatNumberComments = ViewBindings.findChildViewById(rootView, id);
      if (switchCompatNumberComments == null) {
        break missingId;
      }

      id = R.id.switchCompat_number_posts;
      SwitchCompat switchCompatNumberPosts = ViewBindings.findChildViewById(rootView, id);
      if (switchCompatNumberPosts == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.toolBar_textview;
      TextView toolBarTextview = ViewBindings.findChildViewById(rootView, id);
      if (toolBarTextview == null) {
        break missingId;
      }

      id = R.id.tv_add_comment;
      TextView tvAddComment = ViewBindings.findChildViewById(rootView, id);
      if (tvAddComment == null) {
        break missingId;
      }

      id = R.id.tv_firstInformation;
      TextView tvFirstInformation = ViewBindings.findChildViewById(rootView, id);
      if (tvFirstInformation == null) {
        break missingId;
      }

      id = R.id.tv_non_respected_rules;
      TextView tvNonRespectedRules = ViewBindings.findChildViewById(rootView, id);
      if (tvNonRespectedRules == null) {
        break missingId;
      }

      return new ActivityLimitMemberActionBinding((RelativeLayout) rootView, arrowBack,
          buttonCancel, buttonSave, close, editAboutGroup, linLayoutAdminNotes, linLayoutButtons,
          linLayoutLimitComments, linLayoutLimitMemberActivities, linLayoutLimitPosts,
          linLayoutNberCharSequence, nberCharSequence, nestedScrollView, parent, recyclerView,
          relLayoutEditAboutGroup, spinnerCustomLimitCommentsExpiration,
          spinnerCustomLimitPostsExpiration, spinnerCustomNumberComments, spinnerCustomNumberPosts,
          switchCompatNumberComments, switchCompatNumberPosts, toolBar, toolBarTextview,
          tvAddComment, tvFirstInformation, tvNonRespectedRules);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
