// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.MyEditText;
import com.bekambimouen.miiokychallenge.Utils.TouchDetectableScrollView;
import com.bekambimouen.miiokychallenge.like_button_animation.SmallBangView;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ru.tinkoff.scrollingpagerindicator.ScrollingPagerIndicator;

public final class ActivityMarketAboutProductBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout arrowBack;

  @NonNull
  public final TextView boutonQuitter;

  @NonNull
  public final TextView boutonRejoindre;

  @NonNull
  public final TextView buttonFollow;

  @NonNull
  public final ProgressBar buttonProgressBar;

  @NonNull
  public final TextView buttonSent;

  @NonNull
  public final TextView buttonText;

  @NonNull
  public final TextView buttonUnfollow;

  @NonNull
  public final ImageView commentIcon;

  @NonNull
  public final TextView description;

  @NonNull
  public final MyEditText editWriteToTheSeller;

  @NonNull
  public final TextView forRent;

  @NonNull
  public final ImageView image;

  @NonNull
  public final SmallBangView likeHeart;

  @NonNull
  public final LinearLayout linLayoutGoChatWithSeller;

  @NonNull
  public final LinearLayout linLayoutLikesAndComments;

  @NonNull
  public final LinearLayout linLayoutNotYetFriend;

  @NonNull
  public final LinearLayout linLayoutWriteToTheSeller;

  @NonNull
  public final TextView neighborhood;

  @NonNull
  public final TouchDetectableScrollView nestedScrollView;

  @NonNull
  public final TextView numberOfComments;

  @NonNull
  public final TextView numberOfLikes;

  @NonNull
  public final TextView oldPrice;

  @NonNull
  public final ImageView oneImage;

  @NonNull
  public final TextView otherItemsRentedByThisSeller;

  @NonNull
  public final RelativeLayout parent;

  @NonNull
  public final RelativeLayout parent1;

  @NonNull
  public final TextView price;

  @NonNull
  public final TextView productName;

  @NonNull
  public final CircleImageView profilePhoto;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final ProgressBar progressBarToRentOut;

  @NonNull
  public final ScrollingPagerIndicator recyclerIndicator;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final RecyclerView recyclerViewStore;

  @NonNull
  public final RecyclerView recyclerViewToRentOut;

  @NonNull
  public final RelativeLayout relLayout;

  @NonNull
  public final RelativeLayout relLayout4;

  @NonNull
  public final RelativeLayout relLayoutAdd;

  @NonNull
  public final RelativeLayout relLayoutAllButtonsFollow;

  @NonNull
  public final RelativeLayout relLayoutButton;

  @NonNull
  public final RelativeLayout relLayoutCommentIcon;

  @NonNull
  public final RelativeLayout relLayoutDeletedProduct;

  @NonNull
  public final RelativeLayout relLayoutDescription;

  @NonNull
  public final RelativeLayout relLayoutFollowStore;

  @NonNull
  public final RelativeLayout relLayoutFollowUser;

  @NonNull
  public final RelativeLayout relLayoutPost;

  @NonNull
  public final RelativeLayout relLayoutRecyclerView;

  @NonNull
  public final RelativeLayout relLayoutUnfriend;

  @NonNull
  public final RelativeLayout relLayoutViewOverlay;

  @NonNull
  public final TextView sellerOthersStores;

  @NonNull
  public final TextView state;

  @NonNull
  public final TextView storeName;

  @NonNull
  public final TextView textFriend;

  @NonNull
  public final Toolbar toolBar;

  @NonNull
  public final TextView toolBarTextview;

  @NonNull
  public final TextView tpsPublication;

  @NonNull
  public final TextView tvInformationAboutEstablishment;

  @NonNull
  public final TextView viewTheMenu;

  @NonNull
  public final TextView views;

  private ActivityMarketAboutProductBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout arrowBack, @NonNull TextView boutonQuitter,
      @NonNull TextView boutonRejoindre, @NonNull TextView buttonFollow,
      @NonNull ProgressBar buttonProgressBar, @NonNull TextView buttonSent,
      @NonNull TextView buttonText, @NonNull TextView buttonUnfollow,
      @NonNull ImageView commentIcon, @NonNull TextView description,
      @NonNull MyEditText editWriteToTheSeller, @NonNull TextView forRent, @NonNull ImageView image,
      @NonNull SmallBangView likeHeart, @NonNull LinearLayout linLayoutGoChatWithSeller,
      @NonNull LinearLayout linLayoutLikesAndComments, @NonNull LinearLayout linLayoutNotYetFriend,
      @NonNull LinearLayout linLayoutWriteToTheSeller, @NonNull TextView neighborhood,
      @NonNull TouchDetectableScrollView nestedScrollView, @NonNull TextView numberOfComments,
      @NonNull TextView numberOfLikes, @NonNull TextView oldPrice, @NonNull ImageView oneImage,
      @NonNull TextView otherItemsRentedByThisSeller, @NonNull RelativeLayout parent,
      @NonNull RelativeLayout parent1, @NonNull TextView price, @NonNull TextView productName,
      @NonNull CircleImageView profilePhoto, @NonNull ProgressBar progressBar,
      @NonNull ProgressBar progressBarToRentOut, @NonNull ScrollingPagerIndicator recyclerIndicator,
      @NonNull RecyclerView recyclerView, @NonNull RecyclerView recyclerViewStore,
      @NonNull RecyclerView recyclerViewToRentOut, @NonNull RelativeLayout relLayout,
      @NonNull RelativeLayout relLayout4, @NonNull RelativeLayout relLayoutAdd,
      @NonNull RelativeLayout relLayoutAllButtonsFollow, @NonNull RelativeLayout relLayoutButton,
      @NonNull RelativeLayout relLayoutCommentIcon, @NonNull RelativeLayout relLayoutDeletedProduct,
      @NonNull RelativeLayout relLayoutDescription, @NonNull RelativeLayout relLayoutFollowStore,
      @NonNull RelativeLayout relLayoutFollowUser, @NonNull RelativeLayout relLayoutPost,
      @NonNull RelativeLayout relLayoutRecyclerView, @NonNull RelativeLayout relLayoutUnfriend,
      @NonNull RelativeLayout relLayoutViewOverlay, @NonNull TextView sellerOthersStores,
      @NonNull TextView state, @NonNull TextView storeName, @NonNull TextView textFriend,
      @NonNull Toolbar toolBar, @NonNull TextView toolBarTextview, @NonNull TextView tpsPublication,
      @NonNull TextView tvInformationAboutEstablishment, @NonNull TextView viewTheMenu,
      @NonNull TextView views) {
    this.rootView = rootView;
    this.arrowBack = arrowBack;
    this.boutonQuitter = boutonQuitter;
    this.boutonRejoindre = boutonRejoindre;
    this.buttonFollow = buttonFollow;
    this.buttonProgressBar = buttonProgressBar;
    this.buttonSent = buttonSent;
    this.buttonText = buttonText;
    this.buttonUnfollow = buttonUnfollow;
    this.commentIcon = commentIcon;
    this.description = description;
    this.editWriteToTheSeller = editWriteToTheSeller;
    this.forRent = forRent;
    this.image = image;
    this.likeHeart = likeHeart;
    this.linLayoutGoChatWithSeller = linLayoutGoChatWithSeller;
    this.linLayoutLikesAndComments = linLayoutLikesAndComments;
    this.linLayoutNotYetFriend = linLayoutNotYetFriend;
    this.linLayoutWriteToTheSeller = linLayoutWriteToTheSeller;
    this.neighborhood = neighborhood;
    this.nestedScrollView = nestedScrollView;
    this.numberOfComments = numberOfComments;
    this.numberOfLikes = numberOfLikes;
    this.oldPrice = oldPrice;
    this.oneImage = oneImage;
    this.otherItemsRentedByThisSeller = otherItemsRentedByThisSeller;
    this.parent = parent;
    this.parent1 = parent1;
    this.price = price;
    this.productName = productName;
    this.profilePhoto = profilePhoto;
    this.progressBar = progressBar;
    this.progressBarToRentOut = progressBarToRentOut;
    this.recyclerIndicator = recyclerIndicator;
    this.recyclerView = recyclerView;
    this.recyclerViewStore = recyclerViewStore;
    this.recyclerViewToRentOut = recyclerViewToRentOut;
    this.relLayout = relLayout;
    this.relLayout4 = relLayout4;
    this.relLayoutAdd = relLayoutAdd;
    this.relLayoutAllButtonsFollow = relLayoutAllButtonsFollow;
    this.relLayoutButton = relLayoutButton;
    this.relLayoutCommentIcon = relLayoutCommentIcon;
    this.relLayoutDeletedProduct = relLayoutDeletedProduct;
    this.relLayoutDescription = relLayoutDescription;
    this.relLayoutFollowStore = relLayoutFollowStore;
    this.relLayoutFollowUser = relLayoutFollowUser;
    this.relLayoutPost = relLayoutPost;
    this.relLayoutRecyclerView = relLayoutRecyclerView;
    this.relLayoutUnfriend = relLayoutUnfriend;
    this.relLayoutViewOverlay = relLayoutViewOverlay;
    this.sellerOthersStores = sellerOthersStores;
    this.state = state;
    this.storeName = storeName;
    this.textFriend = textFriend;
    this.toolBar = toolBar;
    this.toolBarTextview = toolBarTextview;
    this.tpsPublication = tpsPublication;
    this.tvInformationAboutEstablishment = tvInformationAboutEstablishment;
    this.viewTheMenu = viewTheMenu;
    this.views = views;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMarketAboutProductBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMarketAboutProductBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_market_about_product, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMarketAboutProductBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrowBack;
      RelativeLayout arrowBack = ViewBindings.findChildViewById(rootView, id);
      if (arrowBack == null) {
        break missingId;
      }

      id = R.id.bouton_quitter;
      TextView boutonQuitter = ViewBindings.findChildViewById(rootView, id);
      if (boutonQuitter == null) {
        break missingId;
      }

      id = R.id.bouton_rejoindre;
      TextView boutonRejoindre = ViewBindings.findChildViewById(rootView, id);
      if (boutonRejoindre == null) {
        break missingId;
      }

      id = R.id.button_follow;
      TextView buttonFollow = ViewBindings.findChildViewById(rootView, id);
      if (buttonFollow == null) {
        break missingId;
      }

      id = R.id.button_progressBar;
      ProgressBar buttonProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (buttonProgressBar == null) {
        break missingId;
      }

      id = R.id.button_sent;
      TextView buttonSent = ViewBindings.findChildViewById(rootView, id);
      if (buttonSent == null) {
        break missingId;
      }

      id = R.id.button_text;
      TextView buttonText = ViewBindings.findChildViewById(rootView, id);
      if (buttonText == null) {
        break missingId;
      }

      id = R.id.button_unfollow;
      TextView buttonUnfollow = ViewBindings.findChildViewById(rootView, id);
      if (buttonUnfollow == null) {
        break missingId;
      }

      id = R.id.comment_icon;
      ImageView commentIcon = ViewBindings.findChildViewById(rootView, id);
      if (commentIcon == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.edit_write_to_the_seller;
      MyEditText editWriteToTheSeller = ViewBindings.findChildViewById(rootView, id);
      if (editWriteToTheSeller == null) {
        break missingId;
      }

      id = R.id.for_rent;
      TextView forRent = ViewBindings.findChildViewById(rootView, id);
      if (forRent == null) {
        break missingId;
      }

      id = R.id.image;
      ImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.like_heart;
      SmallBangView likeHeart = ViewBindings.findChildViewById(rootView, id);
      if (likeHeart == null) {
        break missingId;
      }

      id = R.id.linLayout_go_chat_with_seller;
      LinearLayout linLayoutGoChatWithSeller = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutGoChatWithSeller == null) {
        break missingId;
      }

      id = R.id.linLayout_likes_and_comments;
      LinearLayout linLayoutLikesAndComments = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutLikesAndComments == null) {
        break missingId;
      }

      id = R.id.linLayout_not_yet_friend;
      LinearLayout linLayoutNotYetFriend = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutNotYetFriend == null) {
        break missingId;
      }

      id = R.id.linLayout_write_to_the_seller;
      LinearLayout linLayoutWriteToTheSeller = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutWriteToTheSeller == null) {
        break missingId;
      }

      id = R.id.neighborhood;
      TextView neighborhood = ViewBindings.findChildViewById(rootView, id);
      if (neighborhood == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      TouchDetectableScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.number_of_comments;
      TextView numberOfComments = ViewBindings.findChildViewById(rootView, id);
      if (numberOfComments == null) {
        break missingId;
      }

      id = R.id.number_of_likes;
      TextView numberOfLikes = ViewBindings.findChildViewById(rootView, id);
      if (numberOfLikes == null) {
        break missingId;
      }

      id = R.id.old_price;
      TextView oldPrice = ViewBindings.findChildViewById(rootView, id);
      if (oldPrice == null) {
        break missingId;
      }

      id = R.id.one_image;
      ImageView oneImage = ViewBindings.findChildViewById(rootView, id);
      if (oneImage == null) {
        break missingId;
      }

      id = R.id.other_items_rented_by_this_seller;
      TextView otherItemsRentedByThisSeller = ViewBindings.findChildViewById(rootView, id);
      if (otherItemsRentedByThisSeller == null) {
        break missingId;
      }

      id = R.id.parent;
      RelativeLayout parent = ViewBindings.findChildViewById(rootView, id);
      if (parent == null) {
        break missingId;
      }

      RelativeLayout parent1 = (RelativeLayout) rootView;

      id = R.id.price;
      TextView price = ViewBindings.findChildViewById(rootView, id);
      if (price == null) {
        break missingId;
      }

      id = R.id.product_name;
      TextView productName = ViewBindings.findChildViewById(rootView, id);
      if (productName == null) {
        break missingId;
      }

      id = R.id.profile_photo;
      CircleImageView profilePhoto = ViewBindings.findChildViewById(rootView, id);
      if (profilePhoto == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.progressBar_to_rent_out;
      ProgressBar progressBarToRentOut = ViewBindings.findChildViewById(rootView, id);
      if (progressBarToRentOut == null) {
        break missingId;
      }

      id = R.id.recyclerIndicator;
      ScrollingPagerIndicator recyclerIndicator = ViewBindings.findChildViewById(rootView, id);
      if (recyclerIndicator == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.recyclerView_store;
      RecyclerView recyclerViewStore = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewStore == null) {
        break missingId;
      }

      id = R.id.recyclerView_to_rent_out;
      RecyclerView recyclerViewToRentOut = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewToRentOut == null) {
        break missingId;
      }

      id = R.id.relLayout;
      RelativeLayout relLayout = ViewBindings.findChildViewById(rootView, id);
      if (relLayout == null) {
        break missingId;
      }

      id = R.id.relLayout4;
      RelativeLayout relLayout4 = ViewBindings.findChildViewById(rootView, id);
      if (relLayout4 == null) {
        break missingId;
      }

      id = R.id.relLayout_add;
      RelativeLayout relLayoutAdd = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutAdd == null) {
        break missingId;
      }

      id = R.id.relLayout_all_buttons_follow;
      RelativeLayout relLayoutAllButtonsFollow = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutAllButtonsFollow == null) {
        break missingId;
      }

      id = R.id.relLayout_button;
      RelativeLayout relLayoutButton = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutButton == null) {
        break missingId;
      }

      id = R.id.relLayout_comment_icon;
      RelativeLayout relLayoutCommentIcon = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutCommentIcon == null) {
        break missingId;
      }

      id = R.id.relLayout_deleted_product;
      RelativeLayout relLayoutDeletedProduct = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutDeletedProduct == null) {
        break missingId;
      }

      id = R.id.relLayout_description;
      RelativeLayout relLayoutDescription = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutDescription == null) {
        break missingId;
      }

      id = R.id.relLayout_follow_store;
      RelativeLayout relLayoutFollowStore = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutFollowStore == null) {
        break missingId;
      }

      id = R.id.relLayout_follow_user;
      RelativeLayout relLayoutFollowUser = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutFollowUser == null) {
        break missingId;
      }

      id = R.id.relLayout_post;
      RelativeLayout relLayoutPost = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutPost == null) {
        break missingId;
      }

      id = R.id.relLayout_recyclerView;
      RelativeLayout relLayoutRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutRecyclerView == null) {
        break missingId;
      }

      id = R.id.relLayout_unfriend;
      RelativeLayout relLayoutUnfriend = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutUnfriend == null) {
        break missingId;
      }

      id = R.id.relLayout_view_overlay;
      RelativeLayout relLayoutViewOverlay = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutViewOverlay == null) {
        break missingId;
      }

      id = R.id.seller_others_stores;
      TextView sellerOthersStores = ViewBindings.findChildViewById(rootView, id);
      if (sellerOthersStores == null) {
        break missingId;
      }

      id = R.id.state;
      TextView state = ViewBindings.findChildViewById(rootView, id);
      if (state == null) {
        break missingId;
      }

      id = R.id.store_name;
      TextView storeName = ViewBindings.findChildViewById(rootView, id);
      if (storeName == null) {
        break missingId;
      }

      id = R.id.text_friend;
      TextView textFriend = ViewBindings.findChildViewById(rootView, id);
      if (textFriend == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.toolBar_textview;
      TextView toolBarTextview = ViewBindings.findChildViewById(rootView, id);
      if (toolBarTextview == null) {
        break missingId;
      }

      id = R.id.tps_publication;
      TextView tpsPublication = ViewBindings.findChildViewById(rootView, id);
      if (tpsPublication == null) {
        break missingId;
      }

      id = R.id.tv_information_about_establishment;
      TextView tvInformationAboutEstablishment = ViewBindings.findChildViewById(rootView, id);
      if (tvInformationAboutEstablishment == null) {
        break missingId;
      }

      id = R.id.view_the_menu;
      TextView viewTheMenu = ViewBindings.findChildViewById(rootView, id);
      if (viewTheMenu == null) {
        break missingId;
      }

      id = R.id.views;
      TextView views = ViewBindings.findChildViewById(rootView, id);
      if (views == null) {
        break missingId;
      }

      return new ActivityMarketAboutProductBinding((RelativeLayout) rootView, arrowBack,
          boutonQuitter, boutonRejoindre, buttonFollow, buttonProgressBar, buttonSent, buttonText,
          buttonUnfollow, commentIcon, description, editWriteToTheSeller, forRent, image, likeHeart,
          linLayoutGoChatWithSeller, linLayoutLikesAndComments, linLayoutNotYetFriend,
          linLayoutWriteToTheSeller, neighborhood, nestedScrollView, numberOfComments,
          numberOfLikes, oldPrice, oneImage, otherItemsRentedByThisSeller, parent, parent1, price,
          productName, profilePhoto, progressBar, progressBarToRentOut, recyclerIndicator,
          recyclerView, recyclerViewStore, recyclerViewToRentOut, relLayout, relLayout4,
          relLayoutAdd, relLayoutAllButtonsFollow, relLayoutButton, relLayoutCommentIcon,
          relLayoutDeletedProduct, relLayoutDescription, relLayoutFollowStore, relLayoutFollowUser,
          relLayoutPost, relLayoutRecyclerView, relLayoutUnfriend, relLayoutViewOverlay,
          sellerOthersStores, state, storeName, textFriend, toolBar, toolBarTextview,
          tpsPublication, tvInformationAboutEstablishment, viewTheMenu, views);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
