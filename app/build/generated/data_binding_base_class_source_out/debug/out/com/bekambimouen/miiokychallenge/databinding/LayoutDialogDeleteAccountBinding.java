// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutDialogDeleteAccountBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView appName;

  @NonNull
  public final AppCompatButton btnDelete;

  @NonNull
  public final CheckBox checkBox;

  @NonNull
  public final EditText editEmail;

  @NonNull
  public final EditText editPassword;

  @NonNull
  public final LinearLayout main;

  @NonNull
  public final RelativeLayout relEmail;

  @NonNull
  public final RelativeLayout relPassword;

  private LayoutDialogDeleteAccountBinding(@NonNull LinearLayout rootView,
      @NonNull TextView appName, @NonNull AppCompatButton btnDelete, @NonNull CheckBox checkBox,
      @NonNull EditText editEmail, @NonNull EditText editPassword, @NonNull LinearLayout main,
      @NonNull RelativeLayout relEmail, @NonNull RelativeLayout relPassword) {
    this.rootView = rootView;
    this.appName = appName;
    this.btnDelete = btnDelete;
    this.checkBox = checkBox;
    this.editEmail = editEmail;
    this.editPassword = editPassword;
    this.main = main;
    this.relEmail = relEmail;
    this.relPassword = relPassword;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutDialogDeleteAccountBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutDialogDeleteAccountBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_dialog_delete_account, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutDialogDeleteAccountBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appName;
      TextView appName = ViewBindings.findChildViewById(rootView, id);
      if (appName == null) {
        break missingId;
      }

      id = R.id.btn_delete;
      AppCompatButton btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.checkBox;
      CheckBox checkBox = ViewBindings.findChildViewById(rootView, id);
      if (checkBox == null) {
        break missingId;
      }

      id = R.id.edit_email;
      EditText editEmail = ViewBindings.findChildViewById(rootView, id);
      if (editEmail == null) {
        break missingId;
      }

      id = R.id.edit_password;
      EditText editPassword = ViewBindings.findChildViewById(rootView, id);
      if (editPassword == null) {
        break missingId;
      }

      LinearLayout main = (LinearLayout) rootView;

      id = R.id.rel_email;
      RelativeLayout relEmail = ViewBindings.findChildViewById(rootView, id);
      if (relEmail == null) {
        break missingId;
      }

      id = R.id.rel_password;
      RelativeLayout relPassword = ViewBindings.findChildViewById(rootView, id);
      if (relPassword == null) {
        break missingId;
      }

      return new LayoutDialogDeleteAccountBinding((LinearLayout) rootView, appName, btnDelete,
          checkBox, editEmail, editPassword, main, relEmail, relPassword);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
