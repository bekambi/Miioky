// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.TouchDetectableScrollView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBottomsheetMarketLocationCategoryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView accommodation;

  @NonNull
  public final TextView article;

  @NonNull
  public final TextView decorativeObjects;

  @NonNull
  public final TextView device;

  @NonNull
  public final TextView eventEquipment;

  @NonNull
  public final LinearLayout linLayoutAccommodation;

  @NonNull
  public final LinearLayout linLayoutArticle;

  @NonNull
  public final LinearLayout linLayoutDecorativeObjects;

  @NonNull
  public final LinearLayout linLayoutDevice;

  @NonNull
  public final LinearLayout linLayoutEventEquipment;

  @NonNull
  public final LinearLayout linLayoutMachine;

  @NonNull
  public final LinearLayout linLayoutRealEstate;

  @NonNull
  public final LinearLayout linLayoutVehicle;

  @NonNull
  public final LinearLayout linLayoutViewBar;

  @NonNull
  public final TextView machine;

  @NonNull
  public final TouchDetectableScrollView nestedScrollView;

  @NonNull
  public final TextView realEstate;

  @NonNull
  public final TextView vehicle;

  private LayoutBottomsheetMarketLocationCategoryBinding(@NonNull LinearLayout rootView,
      @NonNull TextView accommodation, @NonNull TextView article,
      @NonNull TextView decorativeObjects, @NonNull TextView device,
      @NonNull TextView eventEquipment, @NonNull LinearLayout linLayoutAccommodation,
      @NonNull LinearLayout linLayoutArticle, @NonNull LinearLayout linLayoutDecorativeObjects,
      @NonNull LinearLayout linLayoutDevice, @NonNull LinearLayout linLayoutEventEquipment,
      @NonNull LinearLayout linLayoutMachine, @NonNull LinearLayout linLayoutRealEstate,
      @NonNull LinearLayout linLayoutVehicle, @NonNull LinearLayout linLayoutViewBar,
      @NonNull TextView machine, @NonNull TouchDetectableScrollView nestedScrollView,
      @NonNull TextView realEstate, @NonNull TextView vehicle) {
    this.rootView = rootView;
    this.accommodation = accommodation;
    this.article = article;
    this.decorativeObjects = decorativeObjects;
    this.device = device;
    this.eventEquipment = eventEquipment;
    this.linLayoutAccommodation = linLayoutAccommodation;
    this.linLayoutArticle = linLayoutArticle;
    this.linLayoutDecorativeObjects = linLayoutDecorativeObjects;
    this.linLayoutDevice = linLayoutDevice;
    this.linLayoutEventEquipment = linLayoutEventEquipment;
    this.linLayoutMachine = linLayoutMachine;
    this.linLayoutRealEstate = linLayoutRealEstate;
    this.linLayoutVehicle = linLayoutVehicle;
    this.linLayoutViewBar = linLayoutViewBar;
    this.machine = machine;
    this.nestedScrollView = nestedScrollView;
    this.realEstate = realEstate;
    this.vehicle = vehicle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBottomsheetMarketLocationCategoryBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBottomsheetMarketLocationCategoryBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_bottomsheet_market_location_category, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBottomsheetMarketLocationCategoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.accommodation;
      TextView accommodation = ViewBindings.findChildViewById(rootView, id);
      if (accommodation == null) {
        break missingId;
      }

      id = R.id.article;
      TextView article = ViewBindings.findChildViewById(rootView, id);
      if (article == null) {
        break missingId;
      }

      id = R.id.decorative_objects;
      TextView decorativeObjects = ViewBindings.findChildViewById(rootView, id);
      if (decorativeObjects == null) {
        break missingId;
      }

      id = R.id.device;
      TextView device = ViewBindings.findChildViewById(rootView, id);
      if (device == null) {
        break missingId;
      }

      id = R.id.event_equipment;
      TextView eventEquipment = ViewBindings.findChildViewById(rootView, id);
      if (eventEquipment == null) {
        break missingId;
      }

      id = R.id.linLayout_accommodation;
      LinearLayout linLayoutAccommodation = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutAccommodation == null) {
        break missingId;
      }

      id = R.id.linLayout_article;
      LinearLayout linLayoutArticle = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutArticle == null) {
        break missingId;
      }

      id = R.id.linLayout_decorative_objects;
      LinearLayout linLayoutDecorativeObjects = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutDecorativeObjects == null) {
        break missingId;
      }

      id = R.id.linLayout_device;
      LinearLayout linLayoutDevice = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutDevice == null) {
        break missingId;
      }

      id = R.id.linLayout_event_equipment;
      LinearLayout linLayoutEventEquipment = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutEventEquipment == null) {
        break missingId;
      }

      id = R.id.linLayout_machine;
      LinearLayout linLayoutMachine = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutMachine == null) {
        break missingId;
      }

      id = R.id.linLayout_real_estate;
      LinearLayout linLayoutRealEstate = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutRealEstate == null) {
        break missingId;
      }

      id = R.id.linLayout_vehicle;
      LinearLayout linLayoutVehicle = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutVehicle == null) {
        break missingId;
      }

      id = R.id.linLayout_view_bar;
      LinearLayout linLayoutViewBar = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutViewBar == null) {
        break missingId;
      }

      id = R.id.machine;
      TextView machine = ViewBindings.findChildViewById(rootView, id);
      if (machine == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      TouchDetectableScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.real_estate;
      TextView realEstate = ViewBindings.findChildViewById(rootView, id);
      if (realEstate == null) {
        break missingId;
      }

      id = R.id.vehicle;
      TextView vehicle = ViewBindings.findChildViewById(rootView, id);
      if (vehicle == null) {
        break missingId;
      }

      return new LayoutBottomsheetMarketLocationCategoryBinding((LinearLayout) rootView,
          accommodation, article, decorativeObjects, device, eventEquipment, linLayoutAccommodation,
          linLayoutArticle, linLayoutDecorativeObjects, linLayoutDevice, linLayoutEventEquipment,
          linLayoutMachine, linLayoutRealEstate, linLayoutVehicle, linLayoutViewBar, machine,
          nestedScrollView, realEstate, vehicle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
