// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.MyEditText;
import com.bekambimouen.miiokychallenge.Utils.TouchDetectableScrollView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGroupSeeAllMembersByAdminBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView adminIcon;

  @NonNull
  public final RelativeLayout arrowBack;

  @NonNull
  public final TextView buttonAdministratorSeeMore;

  @NonNull
  public final ImageView close;

  @NonNull
  public final MyEditText editSearch;

  @NonNull
  public final ImageView erase;

  @NonNull
  public final ImageView groupIcon;

  @NonNull
  public final LinearLayout linLayoutAdministrators;

  @NonNull
  public final LinearLayout linLayoutAllMembers;

  @NonNull
  public final LinearLayout linLayoutBlocked;

  @NonNull
  public final LinearLayout linLayoutInvited;

  @NonNull
  public final LinearLayout linLayoutMembers;

  @NonNull
  public final LinearLayout linLayoutRecyclerview;

  @NonNull
  public final TouchDetectableScrollView nestedScrollView;

  @NonNull
  public final RelativeLayout parent;

  @NonNull
  public final RecyclerView recyclerViewAdministrators;

  @NonNull
  public final RecyclerView recyclerViewAllMembers;

  @NonNull
  public final RelativeLayout relLayoutAdmin;

  @NonNull
  public final RelativeLayout relLayoutAdminButton;

  @NonNull
  public final RelativeLayout relLayoutInvite;

  @NonNull
  public final RelativeLayout relLayoutSearch;

  @NonNull
  public final RelativeLayout relLayoutViewOverlay;

  @NonNull
  public final HorizontalScrollView scrollView;

  @NonNull
  public final ImageView searchIdWhite;

  @NonNull
  public final Toolbar toolBar;

  @NonNull
  public final TextView toolBarTextview;

  private ActivityGroupSeeAllMembersByAdminBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageView adminIcon, @NonNull RelativeLayout arrowBack,
      @NonNull TextView buttonAdministratorSeeMore, @NonNull ImageView close,
      @NonNull MyEditText editSearch, @NonNull ImageView erase, @NonNull ImageView groupIcon,
      @NonNull LinearLayout linLayoutAdministrators, @NonNull LinearLayout linLayoutAllMembers,
      @NonNull LinearLayout linLayoutBlocked, @NonNull LinearLayout linLayoutInvited,
      @NonNull LinearLayout linLayoutMembers, @NonNull LinearLayout linLayoutRecyclerview,
      @NonNull TouchDetectableScrollView nestedScrollView, @NonNull RelativeLayout parent,
      @NonNull RecyclerView recyclerViewAdministrators,
      @NonNull RecyclerView recyclerViewAllMembers, @NonNull RelativeLayout relLayoutAdmin,
      @NonNull RelativeLayout relLayoutAdminButton, @NonNull RelativeLayout relLayoutInvite,
      @NonNull RelativeLayout relLayoutSearch, @NonNull RelativeLayout relLayoutViewOverlay,
      @NonNull HorizontalScrollView scrollView, @NonNull ImageView searchIdWhite,
      @NonNull Toolbar toolBar, @NonNull TextView toolBarTextview) {
    this.rootView = rootView;
    this.adminIcon = adminIcon;
    this.arrowBack = arrowBack;
    this.buttonAdministratorSeeMore = buttonAdministratorSeeMore;
    this.close = close;
    this.editSearch = editSearch;
    this.erase = erase;
    this.groupIcon = groupIcon;
    this.linLayoutAdministrators = linLayoutAdministrators;
    this.linLayoutAllMembers = linLayoutAllMembers;
    this.linLayoutBlocked = linLayoutBlocked;
    this.linLayoutInvited = linLayoutInvited;
    this.linLayoutMembers = linLayoutMembers;
    this.linLayoutRecyclerview = linLayoutRecyclerview;
    this.nestedScrollView = nestedScrollView;
    this.parent = parent;
    this.recyclerViewAdministrators = recyclerViewAdministrators;
    this.recyclerViewAllMembers = recyclerViewAllMembers;
    this.relLayoutAdmin = relLayoutAdmin;
    this.relLayoutAdminButton = relLayoutAdminButton;
    this.relLayoutInvite = relLayoutInvite;
    this.relLayoutSearch = relLayoutSearch;
    this.relLayoutViewOverlay = relLayoutViewOverlay;
    this.scrollView = scrollView;
    this.searchIdWhite = searchIdWhite;
    this.toolBar = toolBar;
    this.toolBarTextview = toolBarTextview;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGroupSeeAllMembersByAdminBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGroupSeeAllMembersByAdminBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_group_see_all_members_by_admin, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGroupSeeAllMembersByAdminBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.admin_icon;
      ImageView adminIcon = ViewBindings.findChildViewById(rootView, id);
      if (adminIcon == null) {
        break missingId;
      }

      id = R.id.arrowBack;
      RelativeLayout arrowBack = ViewBindings.findChildViewById(rootView, id);
      if (arrowBack == null) {
        break missingId;
      }

      id = R.id.button_administrator_see_more;
      TextView buttonAdministratorSeeMore = ViewBindings.findChildViewById(rootView, id);
      if (buttonAdministratorSeeMore == null) {
        break missingId;
      }

      id = R.id.close;
      ImageView close = ViewBindings.findChildViewById(rootView, id);
      if (close == null) {
        break missingId;
      }

      id = R.id.edit_search;
      MyEditText editSearch = ViewBindings.findChildViewById(rootView, id);
      if (editSearch == null) {
        break missingId;
      }

      id = R.id.erase;
      ImageView erase = ViewBindings.findChildViewById(rootView, id);
      if (erase == null) {
        break missingId;
      }

      id = R.id.group_icon;
      ImageView groupIcon = ViewBindings.findChildViewById(rootView, id);
      if (groupIcon == null) {
        break missingId;
      }

      id = R.id.linLayout_administrators;
      LinearLayout linLayoutAdministrators = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutAdministrators == null) {
        break missingId;
      }

      id = R.id.linLayout_all_members;
      LinearLayout linLayoutAllMembers = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutAllMembers == null) {
        break missingId;
      }

      id = R.id.linLayout_blocked;
      LinearLayout linLayoutBlocked = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutBlocked == null) {
        break missingId;
      }

      id = R.id.linLayout_invited;
      LinearLayout linLayoutInvited = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutInvited == null) {
        break missingId;
      }

      id = R.id.linLayout_members;
      LinearLayout linLayoutMembers = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutMembers == null) {
        break missingId;
      }

      id = R.id.linLayout_recyclerview;
      LinearLayout linLayoutRecyclerview = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutRecyclerview == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      TouchDetectableScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      RelativeLayout parent = (RelativeLayout) rootView;

      id = R.id.recyclerView_administrators;
      RecyclerView recyclerViewAdministrators = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewAdministrators == null) {
        break missingId;
      }

      id = R.id.recyclerView_all_members;
      RecyclerView recyclerViewAllMembers = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewAllMembers == null) {
        break missingId;
      }

      id = R.id.relLayout_admin;
      RelativeLayout relLayoutAdmin = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutAdmin == null) {
        break missingId;
      }

      id = R.id.relLayout_admin_button;
      RelativeLayout relLayoutAdminButton = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutAdminButton == null) {
        break missingId;
      }

      id = R.id.relLayout_invite;
      RelativeLayout relLayoutInvite = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutInvite == null) {
        break missingId;
      }

      id = R.id.relLayout_search;
      RelativeLayout relLayoutSearch = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutSearch == null) {
        break missingId;
      }

      id = R.id.relLayout_view_overlay;
      RelativeLayout relLayoutViewOverlay = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutViewOverlay == null) {
        break missingId;
      }

      id = R.id.scrollView;
      HorizontalScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.search_id_white;
      ImageView searchIdWhite = ViewBindings.findChildViewById(rootView, id);
      if (searchIdWhite == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.toolBar_textview;
      TextView toolBarTextview = ViewBindings.findChildViewById(rootView, id);
      if (toolBarTextview == null) {
        break missingId;
      }

      return new ActivityGroupSeeAllMembersByAdminBinding((RelativeLayout) rootView, adminIcon,
          arrowBack, buttonAdministratorSeeMore, close, editSearch, erase, groupIcon,
          linLayoutAdministrators, linLayoutAllMembers, linLayoutBlocked, linLayoutInvited,
          linLayoutMembers, linLayoutRecyclerview, nestedScrollView, parent,
          recyclerViewAdministrators, recyclerViewAllMembers, relLayoutAdmin, relLayoutAdminButton,
          relLayoutInvite, relLayoutSearch, relLayoutViewOverlay, scrollView, searchIdWhite,
          toolBar, toolBarTextview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
