// Generated by view binder compiler. Do not edit!
package com.bekambimouen.miiokychallenge.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.appcompat.widget.AppCompatRadioButton;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bekambimouen.miiokychallenge.R;
import com.bekambimouen.miiokychallenge.Utils.ToggleButtonGroupTableLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRegisterSubscriptionBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout arrowBack;

  @NonNull
  public final AppCompatButton btnNext;

  @NonNull
  public final TextView btnTermsOfUse;

  @NonNull
  public final LinearLayout linLayoutSubscription;

  @NonNull
  public final RelativeLayout main;

  @NonNull
  public final TextView pleaseWait;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final ToggleButtonGroupTableLayout radioGroup;

  @NonNull
  public final AppCompatRadioButton radioPrivate;

  @NonNull
  public final AppCompatRadioButton radioPublic;

  @NonNull
  public final RelativeLayout relLayoutTermOfUse;

  @NonNull
  public final Toolbar toolBar;

  @NonNull
  public final TextView tvSubscribeAss;

  private ActivityRegisterSubscriptionBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout arrowBack, @NonNull AppCompatButton btnNext,
      @NonNull TextView btnTermsOfUse, @NonNull LinearLayout linLayoutSubscription,
      @NonNull RelativeLayout main, @NonNull TextView pleaseWait, @NonNull ProgressBar progressBar,
      @NonNull ToggleButtonGroupTableLayout radioGroup, @NonNull AppCompatRadioButton radioPrivate,
      @NonNull AppCompatRadioButton radioPublic, @NonNull RelativeLayout relLayoutTermOfUse,
      @NonNull Toolbar toolBar, @NonNull TextView tvSubscribeAss) {
    this.rootView = rootView;
    this.arrowBack = arrowBack;
    this.btnNext = btnNext;
    this.btnTermsOfUse = btnTermsOfUse;
    this.linLayoutSubscription = linLayoutSubscription;
    this.main = main;
    this.pleaseWait = pleaseWait;
    this.progressBar = progressBar;
    this.radioGroup = radioGroup;
    this.radioPrivate = radioPrivate;
    this.radioPublic = radioPublic;
    this.relLayoutTermOfUse = relLayoutTermOfUse;
    this.toolBar = toolBar;
    this.tvSubscribeAss = tvSubscribeAss;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRegisterSubscriptionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRegisterSubscriptionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_register_subscription, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRegisterSubscriptionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.arrowBack;
      RelativeLayout arrowBack = ViewBindings.findChildViewById(rootView, id);
      if (arrowBack == null) {
        break missingId;
      }

      id = R.id.btn_next;
      AppCompatButton btnNext = ViewBindings.findChildViewById(rootView, id);
      if (btnNext == null) {
        break missingId;
      }

      id = R.id.btn_terms_of_use;
      TextView btnTermsOfUse = ViewBindings.findChildViewById(rootView, id);
      if (btnTermsOfUse == null) {
        break missingId;
      }

      id = R.id.linLayout_subscription;
      LinearLayout linLayoutSubscription = ViewBindings.findChildViewById(rootView, id);
      if (linLayoutSubscription == null) {
        break missingId;
      }

      RelativeLayout main = (RelativeLayout) rootView;

      id = R.id.pleaseWait;
      TextView pleaseWait = ViewBindings.findChildViewById(rootView, id);
      if (pleaseWait == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.radio_group;
      ToggleButtonGroupTableLayout radioGroup = ViewBindings.findChildViewById(rootView, id);
      if (radioGroup == null) {
        break missingId;
      }

      id = R.id.radio_private;
      AppCompatRadioButton radioPrivate = ViewBindings.findChildViewById(rootView, id);
      if (radioPrivate == null) {
        break missingId;
      }

      id = R.id.radio_public;
      AppCompatRadioButton radioPublic = ViewBindings.findChildViewById(rootView, id);
      if (radioPublic == null) {
        break missingId;
      }

      id = R.id.relLayout_term_of_use;
      RelativeLayout relLayoutTermOfUse = ViewBindings.findChildViewById(rootView, id);
      if (relLayoutTermOfUse == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.tv_subscribe_ass;
      TextView tvSubscribeAss = ViewBindings.findChildViewById(rootView, id);
      if (tvSubscribeAss == null) {
        break missingId;
      }

      return new ActivityRegisterSubscriptionBinding((RelativeLayout) rootView, arrowBack, btnNext,
          btnTermsOfUse, linLayoutSubscription, main, pleaseWait, progressBar, radioGroup,
          radioPrivate, radioPublic, relLayoutTermOfUse, toolBar, tvSubscribeAss);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
